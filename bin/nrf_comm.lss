
bin/nrf_comm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000ec2  00000f56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e7  00800106  00800106  00000f5c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  00000f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c22  00000000  00000000  0000120d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000df3  00000000  00000000  00004e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b03  00000000  00000000  00005c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000854  00000000  00000000  00006728  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f1b  00000000  00000000  00006f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000024b5  00000000  00000000  00007e97  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d8  00000000  00000000  0000a34c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  
  return (*p & maska);
}

void pinMode(uint8_t volatile pin, uint8_t volatile mode)
{
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
   c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  //create mask
  //memcpy((void*)&pinDef, pinMap[pin-1], 2);
  pinDef0 = (uint8_t*)&pinMap[pin-1][0];
  10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__vector_6>
  1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  pinDef1 = (uint8_t*)&pinMap[pin-1][1];
  24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_14>
  if (*pinDef0 == 9) return; //supply or other non I/O pin
  3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  maska = (1 << *pinDef1); //pinMap[pin-1][1]);
  44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  54:	0c 94 9d 00 	jmp	0x13a	; 0x13a <__vector_21>
  58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  
  switch (*pinDef0) { //(pinMap[pin-1][0]) {
  60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <__ctors_start>:
  68:	4e 06       	cpc	r4, r30

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  case 1: //DDRB
    p = &DDRB;
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	11 e0       	ldi	r17, 0x01	; 1
    break;
  78:	a0 e0       	ldi	r26, 0x00	; 0
  case 2: //DDRC
    p = &DDRC;
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	e2 ec       	ldi	r30, 0xC2	; 194
  7e:	fe e0       	ldi	r31, 0x0E	; 14
  80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
  82:	05 90       	lpm	r0, Z+
  84:	0d 92       	st	X+, r0
    break;
  86:	a6 30       	cpi	r26, 0x06	; 6
  case 3: //DDRD
    p = &DDRD;
  88:	b1 07       	cpc	r27, r17
  8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	a6 e0       	ldi	r26, 0x06	; 6
  90:	b1 e0       	ldi	r27, 0x01	; 1
  92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
    break;
  94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
  }

  if (p==0) return;
  96:	ad 3e       	cpi	r26, 0xED	; 237
  98:	b2 07       	cpc	r27, r18
  9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>

0000009c <__do_global_ctors>:
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	ca e6       	ldi	r28, 0x6A	; 106
  a0:	d0 e0       	ldi	r29, 0x00	; 0
  if (mode == OUTPUT) {
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_global_ctors+0x10>
  a4:	22 97       	sbiw	r28, 0x02	; 2
  a6:	fe 01       	movw	r30, r28
    *p = *p | maska;
  a8:	0e 94 45 07 	call	0xe8a	; 0xe8a <__tablejump__>
  ac:	c8 36       	cpi	r28, 0x68	; 104
  ae:	d1 07       	cpc	r29, r17
  b0:	c9 f7       	brne	.-14     	; 0xa4 <__do_global_ctors+0x8>
  b2:	0e 94 21 01 	call	0x242	; 0x242 <main>
  }
  else {
    *p = *p & (~maska);
  b6:	0c 94 5f 07 	jmp	0xebe	; 0xebe <_exit>

000000ba <__bad_interrupt>:
  ba:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_default>

000000be <__vector_14>:
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  case 3: //DDRD
    p = &DDRD;
    break;
  }

  if (p==0) return;
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  }
  else {
    *p = *p & (~maska);
  }
  
}
  cc:	4f 93       	push	r20
  ce:	5f 93       	push	r21
  d0:	6f 93       	push	r22
  d2:	7f 93       	push	r23
  d4:	8f 93       	push	r24
    UDR0 = data[i];
  }
}

//======================================================
ISR(TIMER0_COMPA_vect) {
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
  	Mirf.handleRxLoop();
  e0:	86 e2       	ldi	r24, 0x26	; 38
  e2:	91 e0       	ldi	r25, 0x01	; 1
  e4:	0e 94 af 04 	call	0x95e	; 0x95e <_ZN6Nrf24l12handleRxLoopEv>
  	Mirf.handleTxLoop();
  e8:	86 e2       	ldi	r24, 0x26	; 38
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	0e 94 90 05 	call	0xb20	; 0xb20 <_ZN6Nrf24l12handleTxLoopEv>
  	
  	longTimer++;
  f0:	80 91 0b 01 	lds	r24, 0x010B
  f4:	90 91 0c 01 	lds	r25, 0x010C
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 0c 01 	sts	0x010C, r25
  fe:	80 93 0b 01 	sts	0x010B, r24
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	bf 91       	pop	r27
 108:	af 91       	pop	r26
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	7f 91       	pop	r23
 110:	6f 91       	pop	r22
 112:	5f 91       	pop	r21
 114:	4f 91       	pop	r20
 116:	3f 91       	pop	r19
 118:	2f 91       	pop	r18
 11a:	0f 90       	pop	r0
 11c:	0f be       	out	0x3f, r0	; 63
 11e:	0f 90       	pop	r0
 120:	1f 90       	pop	r1
 122:	18 95       	reti

00000124 <__vector_default>:

ISR(BADISR_vect) { //just for case
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
  __asm__("nop\n\t");
 12e:	00 00       	nop
}
 130:	0f 90       	pop	r0
 132:	0f be       	out	0x3f, r0	; 63
 134:	0f 90       	pop	r0
 136:	1f 90       	pop	r1
 138:	18 95       	reti

0000013a <__vector_21>:

ISR(ADC_vect) {
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
	  SMCR = 0; //disable adc sleep and enable normal Idle mode
 144:	13 be       	out	0x33, r1	; 51
}
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_6>:

// WATCHDOG interrupt (for cyclic waking of low power device)
#ifdef LOW_POWER_ENABLE
ISR(WDT_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
    wdt_timer++;
 15c:	80 91 0a 01 	lds	r24, 0x010A
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 0a 01 	sts	0x010A, r24
}
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <_Z10ReadDS1820v>:
#endif

void ReadDS1820(void)
{
 172:	cf 93       	push	r28
//read temperature from DS1820 and store it to memory

	//DS18X20_read_maxres_single( gDallasID[0], &temp_eminus4 );

	DS18X20_start_meas( DS18X20_POWER_EXTERN, NULL );
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	70 e0       	ldi	r23, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <DS18X20_start_meas>
	while (DS18X20_conversion_in_progress() == DS18X20_CONVERTING) __asm__("nop\n\t");
 17e:	01 c0       	rjmp	.+2      	; 0x182 <_Z10ReadDS1820v+0x10>
 180:	00 00       	nop
 182:	0e 94 3b 07 	call	0xe76	; 0xe76 <DS18X20_conversion_in_progress>
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	d9 f3       	breq	.-10     	; 0x180 <_Z10ReadDS1820v+0xe>
	ow_command( DS18X20_READ, NULL );
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	8e eb       	ldi	r24, 0xBE	; 190
 190:	0e 94 15 07 	call	0xe2a	; 0xe2a <ow_command>
	
    //read 16bit value into uint16
    ds1820Temp.lsb = ow_byte_rd();
 194:	0e 94 11 07 	call	0xe22	; 0xe22 <ow_byte_rd>
 198:	80 93 06 01 	sts	0x0106, r24
    ds1820Temp.msb = ow_byte_rd();
 19c:	0e 94 11 07 	call	0xe22	; 0xe22 <ow_byte_rd>
 1a0:	80 93 07 01 	sts	0x0107, r24
 1a4:	c7 e0       	ldi	r28, 0x07	; 7
    
    //read rest of bytes from sensor, but we do not use the data
    for ( uint8_t i = 2; i < DS18X20_SP_SIZE; i++ )
    {
		ow_byte_rd();
 1a6:	0e 94 11 07 	call	0xe22	; 0xe22 <ow_byte_rd>
 1aa:	c1 50       	subi	r28, 0x01	; 1
    //read 16bit value into uint16
    ds1820Temp.lsb = ow_byte_rd();
    ds1820Temp.msb = ow_byte_rd();
    
    //read rest of bytes from sensor, but we do not use the data
    for ( uint8_t i = 2; i < DS18X20_SP_SIZE; i++ )
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <_Z10ReadDS1820v+0x34>
    {
		ow_byte_rd();
	}
}
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <_Z9getAdcValv>:

//======================================================
//WARNING: adc MUX and reference must be set before calling this
void getAdcVal(void)
{
	  SMCR = 2; //enable ADC noise reduct sleep mode
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	83 bf       	out	0x33, r24	; 51

	  ADCSRA |= _BV(ADSC);  // Start the ADC
 1b6:	ea e7       	ldi	r30, 0x7A	; 122
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	80 64       	ori	r24, 0x40	; 64
 1be:	80 83       	st	Z, r24
	  sleep_enable();
 1c0:	83 b7       	in	r24, 0x33	; 51
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	83 bf       	out	0x33, r24	; 51
	  sleep_cpu();
 1c6:	88 95       	sleep
 1c8:	08 95       	ret

000001ca <_Z5setupv>:

//======================================================
void setup()
{
  //configure uart0  (57600, 8bits, no parity, 1 stop bit)
  UBRR0H = 0;
 1ca:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = 16;
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	80 93 c4 00 	sts	0x00C4, r24
  UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	80 93 c2 00 	sts	0x00C2, r24
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
 1da:	88 e1       	ldi	r24, 0x18	; 24
 1dc:	80 93 c1 00 	sts	0x00C1, r24
  
  //read internal temp sensor calibration byte from eeprom
  internalTempCalib = eeprom_read_byte(SENSOR_0_CALIB_ADDR);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 49 07 	call	0xe92	; 0xe92 <__eerd_byte_m328p>
  if (internalTempCalib == 0xFF) internalTempCalib = 128;
 1e8:	8f 3f       	cpi	r24, 0xFF	; 255
 1ea:	19 f0       	breq	.+6      	; 0x1f2 <_Z5setupv+0x28>
  UBRR0L = 16;
  UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
  UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  
  //read internal temp sensor calibration byte from eeprom
  internalTempCalib = eeprom_read_byte(SENSOR_0_CALIB_ADDR);
 1ec:	80 93 0e 01 	sts	0x010E, r24
 1f0:	03 c0       	rjmp	.+6      	; 0x1f8 <_Z5setupv+0x2e>
  if (internalTempCalib == 0xFF) internalTempCalib = 128;
 1f2:	80 e8       	ldi	r24, 0x80	; 128
 1f4:	80 93 0e 01 	sts	0x010E, r24

  //start Radio
  Mirf.init();
 1f8:	86 e2       	ldi	r24, 0x26	; 38
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	0e 94 61 03 	call	0x6c2	; 0x6c2 <_ZN6Nrf24l4initEv>
  Mirf.config();
 200:	86 e2       	ldi	r24, 0x26	; 38
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	0e 94 04 04 	call	0x808	; 0x808 <_ZN6Nrf24l6configEv>
  Mirf.setDevAddr(DEV_ADDR);
 208:	62 e0       	ldi	r22, 0x02	; 2
 20a:	86 e2       	ldi	r24, 0x26	; 38
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <_ZN6Nrf24l10setDevAddrEh>
  
  //timer0 10ms period, interrupt enable
  //prescaler 1024, count to 156
  OCR0A = 156;
 212:	8c e9       	ldi	r24, 0x9C	; 156
 214:	87 bd       	out	0x27, r24	; 39
  OCR0B = 170;
 216:	8a ea       	ldi	r24, 0xAA	; 170
 218:	88 bd       	out	0x28, r24	; 40
  TCCR0A = 2;
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	84 bd       	out	0x24, r24	; 36
  TCCR0B = 5;
 21e:	95 e0       	ldi	r25, 0x05	; 5
 220:	95 bd       	out	0x25, r25	; 37
  TIMSK0 = 2;
 222:	80 93 6e 00 	sts	0x006E, r24

  //set ADC to read temp from internal sensor, 1.1V reference, prescaler 128
  ADMUX = (_BV(REFS1) | _BV(REFS0) | _BV(MUX3));
 226:	88 ec       	ldi	r24, 0xC8	; 200
 228:	80 93 7c 00 	sts	0x007C, r24
  ADCSRA |= (_BV(ADEN) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) );  // enable the ADC
 22c:	ea e7       	ldi	r30, 0x7A	; 122
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	90 81       	ld	r25, Z
 232:	9f 68       	ori	r25, 0x8F	; 143
 234:	90 83       	st	Z, r25

  //led13 as output
  //pinMode(SWITCHED_PIN, OUTPUT);
  pinState = HIGH;
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	90 93 0f 01 	sts	0x010F, r25
  //digitalWrite(SWITCHED_PIN, pinState);

  //disable unused peripherials
  PRR = ( _BV(PRTWI) | _BV(PRTIM1) | _BV(PRTIM2) ) ;
 23c:	80 93 64 00 	sts	0x0064, r24
 240:	08 95       	ret

00000242 <main>:
}

//======================================================
int main(void)
{
 wdt_disable();   
 242:	88 e1       	ldi	r24, 0x18	; 24
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	80 93 60 00 	sts	0x0060, r24
 24c:	10 92 60 00 	sts	0x0060, r1
 250:	0f be       	out	0x3f, r0	; 63

 setup();
 252:	0e 94 e5 00 	call	0x1ca	; 0x1ca <_Z5setupv>
 ReadDS1820();  //for the first time
 256:	0e 94 b9 00 	call	0x172	; 0x172 <_Z10ReadDS1820v>

 sei();
 25a:	78 94       	sei
 
 memset((void*)&outPacket, 0, sizeof(mirfPacket) );
 25c:	8b e0       	ldi	r24, 0x0B	; 11
 25e:	e0 e1       	ldi	r30, 0x10	; 16
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	df 01       	movw	r26, r30
 264:	1d 92       	st	X+, r1
 266:	8a 95       	dec	r24
 268:	e9 f7       	brne	.-6      	; 0x264 <main+0x22>
        continue;
    }
    #endif
    
   //zpracovat prichozi packet
   if (Mirf.inPacketReady)
 26a:	05 ee       	ldi	r16, 0xE5	; 229
 26c:	11 e0       	ldi	r17, 0x01	; 1
   {
   		longTimer = 0;
        //temperature measurement is refreshed during end of low power mode
         
        // ENTER POWER DOWN MODE - watchdog timed refresh
        TIMSK0 = 0; // turn off 10ms timer (by disabling its interrupt)
 26e:	0f 2e       	mov	r0, r31
 270:	fe e6       	ldi	r31, 0x6E	; 110
 272:	cf 2e       	mov	r12, r31
 274:	d1 2c       	mov	r13, r1
 276:	f0 2d       	mov	r31, r0
        SMCR = 0b00000100; //power down sleep mode
        WDTCSR = (1<<WDCE) | (1<<WDE) | (1<<WDP3) | (1<<WDP0);    
 278:	c0 e6       	ldi	r28, 0x60	; 96
 27a:	d0 e0       	ldi	r29, 0x00	; 0
     Mirf.readPacket((mirfPacket*)&inPacket);
     
     //sprintf((char*)buff, "in: TX:%d,T:%d,C:%d\n", inPacket.txAddr, inPacket.type, inPacket.counter);
     //USART_Transmit((char*)buff, strlen((char*)buff) );
          
     if ( (PACKET_TYPE)inPacket.type == REQUEST )
 27c:	0f 2e       	mov	r0, r31
 27e:	fd e1       	ldi	r31, 0x1D	; 29
 280:	ef 2e       	mov	r14, r31
 282:	f1 e0       	ldi	r31, 0x01	; 1
 284:	ff 2e       	mov	r15, r31
 286:	f0 2d       	mov	r31, r0
  			Mirf.sendPacket((mirfPacket*)&outPacket);
  		}
	 }
     else if ( (PACKET_TYPE)inPacket.type == PRESENTATION_REQUEST )
     {
 		outPacket.type = PRESENTATION_RESPONSE;
 288:	0f 2e       	mov	r0, r31
 28a:	f2 e1       	ldi	r31, 0x12	; 18
 28c:	8f 2e       	mov	r8, r31
 28e:	f1 e0       	ldi	r31, 0x01	; 1
 290:	9f 2e       	mov	r9, r31
 292:	f0 2d       	mov	r31, r0
 		outPacket.rxAddr = inPacket.txAddr;
 294:	0f 2e       	mov	r0, r31
 296:	f1 e1       	ldi	r31, 0x11	; 17
 298:	6f 2e       	mov	r6, r31
 29a:	f1 e0       	ldi	r31, 0x01	; 1
 29c:	7f 2e       	mov	r7, r31
 29e:	f0 2d       	mov	r31, r0
 		payloadPresentationStruct *res = (payloadPresentationStruct*)&outPacket.payload;
 		res->num_sensors = NUM_SENSORS;
 2a0:	0f 2e       	mov	r0, r31
 2a2:	f4 e1       	ldi	r31, 0x14	; 20
 2a4:	4f 2e       	mov	r4, r31
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	5f 2e       	mov	r5, r31
 2aa:	f0 2d       	mov	r31, r0
   		res->sensor_type[0] = SENSOR_0_TYPE;
 2ac:	0f 2e       	mov	r0, r31
 2ae:	f5 e1       	ldi	r31, 0x15	; 21
 2b0:	af 2e       	mov	r10, r31
 2b2:	f1 e0       	ldi	r31, 0x01	; 1
 2b4:	bf 2e       	mov	r11, r31
 2b6:	f0 2d       	mov	r31, r0
   		res->sensor_type[1] = SENSOR_1_TYPE;
 2b8:	0f 2e       	mov	r0, r31
 2ba:	f6 e1       	ldi	r31, 0x16	; 22
 2bc:	2f 2e       	mov	r2, r31
 2be:	f1 e0       	ldi	r31, 0x01	; 1
 2c0:	3f 2e       	mov	r3, r31
 2c2:	f0 2d       	mov	r31, r0
 //debug();
 while(1) {

    #ifdef LOW_POWER_ENABLE 
    //low power mode driven by watchdog resets - loop trap
    if (low_power_mode == 1)
 2c4:	80 91 09 01 	lds	r24, 0x0109
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	09 f5       	brne	.+66     	; 0x30e <main+0xcc>
    {
        if (wdt_timer == LOW_POWER_CYCLES) { //sleep mode elapsed, turn off and go to normal mode
 2cc:	80 91 0a 01 	lds	r24, 0x010A
 2d0:	88 30       	cpi	r24, 0x08	; 8
 2d2:	99 f4       	brne	.+38     	; 0x2fa <main+0xb8>
            SMCR = 0; //power down mode = off
 2d4:	13 be       	out	0x33, r1	; 51
            WDTCSR = (1<<WDCE) | (1<<WDE);    
 2d6:	88 e1       	ldi	r24, 0x18	; 24
 2d8:	88 83       	st	Y, r24
            WDTCSR = 0; //wdt = off
 2da:	18 82       	st	Y, r1
            wdt_timer = 0;
 2dc:	10 92 0a 01 	sts	0x010A, r1
            low_power_mode = 0;
 2e0:	10 92 09 01 	sts	0x0109, r1
            //enable Mirf receiver - run before reading DS1820 enables to catch incoming packet(s) during temp read
            Mirf.powerUpRx();
 2e4:	86 e2       	ldi	r24, 0x26	; 38
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 c7 03 	call	0x78e	; 0x78e <_ZN6Nrf24l9powerUpRxEv>
            ReadDS1820(); //refresh temperature measurement
 2ec:	0e 94 b9 00 	call	0x172	; 0x172 <_Z10ReadDS1820v>
            TIFR0 = 2; //delete possible interrupt flag of timer0      
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	85 bb       	out	0x15, r24	; 21
            TIMSK0 = 2; //activate interrupts for timer0
 2f4:	f6 01       	movw	r30, r12
 2f6:	80 83       	st	Z, r24
 2f8:	e5 cf       	rjmp	.-54     	; 0x2c4 <main+0x82>
        }
        else {  //continue with sleep mode
            WDTCSR |= (1<<WDIE); //interrupt enable flag is atomatically cleared by interrupt for watchdog, must be refreshed
 2fa:	88 81       	ld	r24, Y
 2fc:	80 64       	ori	r24, 0x40	; 64
 2fe:	88 83       	st	Y, r24
            SMCR = 0b00000100; //power down sleep mode                       		
 300:	84 e0       	ldi	r24, 0x04	; 4
 302:	83 bf       	out	0x33, r24	; 51
            sleep_enable();
 304:	83 b7       	in	r24, 0x33	; 51
 306:	81 60       	ori	r24, 0x01	; 1
 308:	83 bf       	out	0x33, r24	; 51
            sleep_cpu();      
 30a:	88 95       	sleep
 30c:	db cf       	rjmp	.-74     	; 0x2c4 <main+0x82>
        continue;
    }
    #endif
    
   //zpracovat prichozi packet
   if (Mirf.inPacketReady)
 30e:	d8 01       	movw	r26, r16
 310:	8c 91       	ld	r24, X
 312:	88 23       	and	r24, r24
 314:	09 f4       	brne	.+2      	; 0x318 <main+0xd6>
 316:	d9 c0       	rjmp	.+434    	; 0x4ca <main+0x288>
   {
     Mirf.readPacket((mirfPacket*)&inPacket);
 318:	6b e1       	ldi	r22, 0x1B	; 27
 31a:	71 e0       	ldi	r23, 0x01	; 1
 31c:	86 e2       	ldi	r24, 0x26	; 38
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 8e 02 	call	0x51c	; 0x51c <_ZN6Nrf24l10readPacketEP10mirfPacket>
     
     //sprintf((char*)buff, "in: TX:%d,T:%d,C:%d\n", inPacket.txAddr, inPacket.type, inPacket.counter);
     //USART_Transmit((char*)buff, strlen((char*)buff) );
          
     if ( (PACKET_TYPE)inPacket.type == REQUEST )
 324:	f7 01       	movw	r30, r14
 326:	80 81       	ld	r24, Z
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	09 f0       	breq	.+2      	; 0x32e <main+0xec>
 32c:	ad c0       	rjmp	.+346    	; 0x488 <main+0x246>
	 {
	    payloadRequestStruct *req = (payloadRequestStruct*)&inPacket.payload;
		outPacket.type = RESPONSE;
 32e:	84 e0       	ldi	r24, 0x04	; 4
 330:	d4 01       	movw	r26, r8
 332:	8c 93       	st	X, r24
		outPacket.rxAddr = inPacket.txAddr;
 334:	80 91 1b 01 	lds	r24, 0x011B
 338:	f3 01       	movw	r30, r6
 33a:	80 83       	st	Z, r24
		payloadResponseStruct *res = (payloadResponseStruct*)&outPacket.payload;
		res->cmd = req->cmd;
 33c:	90 91 1f 01 	lds	r25, 0x011F
 340:	d2 01       	movw	r26, r4
 342:	9c 93       	st	X, r25
  		res->from_sensor = req->for_sensor;
 344:	80 91 21 01 	lds	r24, 0x0121
 348:	f1 01       	movw	r30, r2
 34a:	80 83       	st	Z, r24
  		res->len = 1;
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	d5 01       	movw	r26, r10
 350:	2c 93       	st	X, r18

  	    if (req->for_sensor == 0) //==== internal temp sensor =====
 352:	81 11       	cpse	r24, r1
 354:	3e c0       	rjmp	.+124    	; 0x3d2 <main+0x190>
  	    {
  	    	if (req->cmd == READ)
 356:	91 11       	cpse	r25, r1
 358:	1d c0       	rjmp	.+58     	; 0x394 <main+0x152>
  	    	{
  	    		getAdcVal();
 35a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z9getAdcValv>
  	    		adcVal = ADCW - 19 - internalTempCalib;
 35e:	80 91 78 00 	lds	r24, 0x0078
 362:	90 91 79 00 	lds	r25, 0x0079
 366:	90 91 0e 01 	lds	r25, 0x010E
 36a:	89 1b       	sub	r24, r25
 36c:	83 51       	subi	r24, 0x13	; 19
 36e:	80 93 08 01 	sts	0x0108, r24
  	    		res->payload[0] = adcVal;
 372:	80 91 08 01 	lds	r24, 0x0108
 376:	e7 e1       	ldi	r30, 0x17	; 23
 378:	f1 e0       	ldi	r31, 0x01	; 1
 37a:	80 83       	st	Z, r24
  	    		sendResult = Mirf.sendResult;
 37c:	a7 ee       	ldi	r26, 0xE7	; 231
 37e:	b1 e0       	ldi	r27, 0x01	; 1
 380:	8c 91       	ld	r24, X
 382:	80 93 0d 01 	sts	0x010D, r24
  	    		Mirf.sendPacket((mirfPacket*)&outPacket);
 386:	60 e1       	ldi	r22, 0x10	; 16
 388:	71 e0       	ldi	r23, 0x01	; 1
 38a:	86 e2       	ldi	r24, 0x26	; 38
 38c:	91 e0       	ldi	r25, 0x01	; 1
 38e:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN6Nrf24l10sendPacketEP10mirfPacket>
 392:	98 cf       	rjmp	.-208    	; 0x2c4 <main+0x82>
  	    	}
  	    	else if (req->cmd == CALIBRATION_WRITE)
 394:	95 30       	cpi	r25, 0x05	; 5
 396:	71 f4       	brne	.+28     	; 0x3b4 <main+0x172>
  	    	{
  	    		if (internalTempCalib != req->payload[0])
 398:	60 91 22 01 	lds	r22, 0x0122
 39c:	80 91 0e 01 	lds	r24, 0x010E
 3a0:	68 17       	cp	r22, r24
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <main+0x164>
 3a4:	8f cf       	rjmp	.-226    	; 0x2c4 <main+0x82>
  	    		{
  	    			internalTempCalib = req->payload[0];
 3a6:	60 93 0e 01 	sts	0x010E, r22
  	    			eeprom_write_byte(SENSOR_0_CALIB_ADDR, req->payload[0]);
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 51 07 	call	0xea2	; 0xea2 <__eewr_byte_m328p>
 3b2:	88 cf       	rjmp	.-240    	; 0x2c4 <main+0x82>
  	    		}
  	    	}
  	    	else if (req->cmd == CALIBRATION_READ)
 3b4:	96 30       	cpi	r25, 0x06	; 6
 3b6:	09 f0       	breq	.+2      	; 0x3ba <main+0x178>
 3b8:	85 cf       	rjmp	.-246    	; 0x2c4 <main+0x82>
  	    	{
  	    		res->payload[0] = internalTempCalib;
 3ba:	80 91 0e 01 	lds	r24, 0x010E
 3be:	e7 e1       	ldi	r30, 0x17	; 23
 3c0:	f1 e0       	ldi	r31, 0x01	; 1
 3c2:	80 83       	st	Z, r24
  	    		Mirf.sendPacket((mirfPacket*)&outPacket);
 3c4:	60 e1       	ldi	r22, 0x10	; 16
 3c6:	71 e0       	ldi	r23, 0x01	; 1
 3c8:	86 e2       	ldi	r24, 0x26	; 38
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN6Nrf24l10sendPacketEP10mirfPacket>
 3d0:	79 cf       	rjmp	.-270    	; 0x2c4 <main+0x82>
  	    	}
         
  		}
  		else if (req->for_sensor == 1) //==== door switch =====
 3d2:	81 30       	cpi	r24, 0x01	; 1
 3d4:	e9 f4       	brne	.+58     	; 0x410 <main+0x1ce>
  		{  
  		  if (req->cmd == WRITE)
 3d6:	91 30       	cpi	r25, 0x01	; 1
 3d8:	59 f4       	brne	.+22     	; 0x3f0 <main+0x1ae>
  		  {
  		     if (req->payload[0] > 0) pinState = HIGH; else pinState = LOW;
 3da:	80 91 22 01 	lds	r24, 0x0122
 3de:	88 23       	and	r24, r24
 3e0:	21 f0       	breq	.+8      	; 0x3ea <main+0x1a8>
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 0f 01 	sts	0x010F, r24
 3e8:	6d cf       	rjmp	.-294    	; 0x2c4 <main+0x82>
 3ea:	10 92 0f 01 	sts	0x010F, r1
 3ee:	6a cf       	rjmp	.-300    	; 0x2c4 <main+0x82>
  			 //digitalWrite(SWITCHED_PIN, pinState);
  		  }
  		  else if (req->cmd == READ)
 3f0:	91 11       	cpse	r25, r1
 3f2:	68 cf       	rjmp	.-304    	; 0x2c4 <main+0x82>
  		  {
  			 res->payload[0] = pinState;
 3f4:	80 91 0f 01 	lds	r24, 0x010F
 3f8:	a7 e1       	ldi	r26, 0x17	; 23
 3fa:	b1 e0       	ldi	r27, 0x01	; 1
 3fc:	8c 93       	st	X, r24
  			 sendResult = Mirf.sendPacket((mirfPacket*)&outPacket);
 3fe:	60 e1       	ldi	r22, 0x10	; 16
 400:	71 e0       	ldi	r23, 0x01	; 1
 402:	86 e2       	ldi	r24, 0x26	; 38
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN6Nrf24l10sendPacketEP10mirfPacket>
 40a:	80 93 0d 01 	sts	0x010D, r24
 40e:	5a cf       	rjmp	.-332    	; 0x2c4 <main+0x82>
  		  }
        }
  		else if (req->for_sensor == 2) //==== dallas 1820 temperature ====
 410:	82 30       	cpi	r24, 0x02	; 2
 412:	69 f5       	brne	.+90     	; 0x46e <main+0x22c>
  		{
            //use value stored in memory
	  		res->len = 2;
 414:	f5 01       	movw	r30, r10
 416:	80 83       	st	Z, r24
			res->payload[0] = ds1820Temp.lsb;
 418:	80 91 06 01 	lds	r24, 0x0106
 41c:	a7 e1       	ldi	r26, 0x17	; 23
 41e:	b1 e0       	ldi	r27, 0x01	; 1
 420:	8c 93       	st	X, r24
			res->payload[1] = ds1820Temp.msb;
 422:	80 91 07 01 	lds	r24, 0x0107
 426:	e8 e1       	ldi	r30, 0x18	; 24
 428:	f1 e0       	ldi	r31, 0x01	; 1
 42a:	80 83       	st	Z, r24
  			Mirf.sendPacket((mirfPacket*)&outPacket);
 42c:	60 e1       	ldi	r22, 0x10	; 16
 42e:	71 e0       	ldi	r23, 0x01	; 1
 430:	86 e2       	ldi	r24, 0x26	; 38
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN6Nrf24l10sendPacketEP10mirfPacket>
                //wait until the packet is really sent and then
                //increase long timer, so in next while loop it will jump right into power down mode,
                //even if whole interval (3sec) didnt elapse yet
                //this should save some power
                //but limit this feature only on SUCCESSFUL sending of packet 
                while (Mirf.sendResult == 1) NOP_ASM
 438:	a7 ee       	ldi	r26, 0xE7	; 231
 43a:	b1 e0       	ldi	r27, 0x01	; 1
 43c:	8c 91       	ld	r24, X
 43e:	81 30       	cpi	r24, 0x01	; 1
 440:	31 f4       	brne	.+12     	; 0x44e <main+0x20c>
 442:	00 00       	nop
 444:	e7 ee       	ldi	r30, 0xE7	; 231
 446:	f1 e0       	ldi	r31, 0x01	; 1
 448:	80 81       	ld	r24, Z
 44a:	81 30       	cpi	r24, 0x01	; 1
 44c:	d1 f3       	breq	.-12     	; 0x442 <main+0x200>
                if (Mirf.sendResult == 0) { //was it succesfull send?
 44e:	a7 ee       	ldi	r26, 0xE7	; 231
 450:	b1 e0       	ldi	r27, 0x01	; 1
 452:	8c 91       	ld	r24, X
 454:	81 11       	cpse	r24, r1
 456:	36 cf       	rjmp	.-404    	; 0x2c4 <main+0x82>
                    longTimer += TIMER_3_SEC_PERIOD;
 458:	80 91 0b 01 	lds	r24, 0x010B
 45c:	90 91 0c 01 	lds	r25, 0x010C
 460:	84 5d       	subi	r24, 0xD4	; 212
 462:	9e 4f       	sbci	r25, 0xFE	; 254
 464:	90 93 0c 01 	sts	0x010C, r25
 468:	80 93 0b 01 	sts	0x010B, r24
 46c:	2b cf       	rjmp	.-426    	; 0x2c4 <main+0x82>
                }
            #endif
  		}
  		else if (req->for_sensor == 3) //==== voltage of supply battery ====
 46e:	83 30       	cpi	r24, 0x03	; 3
 470:	09 f0       	breq	.+2      	; 0x474 <main+0x232>
 472:	28 cf       	rjmp	.-432    	; 0x2c4 <main+0x82>
  		{ //it is 2 cells in series, so there will be divider /2 on the input (real voltage would be 2x)
  			res->len = 2;
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	f5 01       	movw	r30, r10
 478:	80 83       	st	Z, r24
  			Mirf.sendPacket((mirfPacket*)&outPacket);
 47a:	60 e1       	ldi	r22, 0x10	; 16
 47c:	71 e0       	ldi	r23, 0x01	; 1
 47e:	86 e2       	ldi	r24, 0x26	; 38
 480:	91 e0       	ldi	r25, 0x01	; 1
 482:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN6Nrf24l10sendPacketEP10mirfPacket>
 486:	1e cf       	rjmp	.-452    	; 0x2c4 <main+0x82>
  		}
	 }
     else if ( (PACKET_TYPE)inPacket.type == PRESENTATION_REQUEST )
 488:	80 81       	ld	r24, Z
 48a:	85 30       	cpi	r24, 0x05	; 5
 48c:	09 f0       	breq	.+2      	; 0x490 <main+0x24e>
 48e:	1a cf       	rjmp	.-460    	; 0x2c4 <main+0x82>
     {
 		outPacket.type = PRESENTATION_RESPONSE;
 490:	8a e0       	ldi	r24, 0x0A	; 10
 492:	f4 01       	movw	r30, r8
 494:	80 83       	st	Z, r24
 		outPacket.rxAddr = inPacket.txAddr;
 496:	80 91 1b 01 	lds	r24, 0x011B
 49a:	d3 01       	movw	r26, r6
 49c:	8c 93       	st	X, r24
 		payloadPresentationStruct *res = (payloadPresentationStruct*)&outPacket.payload;
 		res->num_sensors = NUM_SENSORS;
 49e:	83 e0       	ldi	r24, 0x03	; 3
 4a0:	f2 01       	movw	r30, r4
 4a2:	80 83       	st	Z, r24
   		res->sensor_type[0] = SENSOR_0_TYPE;
 4a4:	d5 01       	movw	r26, r10
 4a6:	8c 93       	st	X, r24
   		res->sensor_type[1] = SENSOR_1_TYPE;
 4a8:	f1 01       	movw	r30, r2
 4aa:	10 82       	st	Z, r1
   		res->sensor_type[2] = SENSOR_2_TYPE;
 4ac:	84 e8       	ldi	r24, 0x84	; 132
 4ae:	a7 e1       	ldi	r26, 0x17	; 23
 4b0:	b1 e0       	ldi	r27, 0x01	; 1
 4b2:	8c 93       	st	X, r24
   		res->sensor_type[3] = SENSOR_3_TYPE;
 4b4:	86 e0       	ldi	r24, 0x06	; 6
 4b6:	e8 e1       	ldi	r30, 0x18	; 24
 4b8:	f1 e0       	ldi	r31, 0x01	; 1
 4ba:	80 83       	st	Z, r24
   		Mirf.sendPacket((mirfPacket*)&outPacket);
 4bc:	60 e1       	ldi	r22, 0x10	; 16
 4be:	71 e0       	ldi	r23, 0x01	; 1
 4c0:	86 e2       	ldi	r24, 0x26	; 38
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	0e 94 b9 02 	call	0x572	; 0x572 <_ZN6Nrf24l10sendPacketEP10mirfPacket>
 4c8:	fd ce       	rjmp	.-518    	; 0x2c4 <main+0x82>
     }
   }
#ifdef LOW_POWER_ENABLE 
   else if (longTimer > TIMER_3_SEC_PERIOD) //3sec period awake (only)
 4ca:	80 91 0b 01 	lds	r24, 0x010B
 4ce:	90 91 0c 01 	lds	r25, 0x010C
 4d2:	8d 32       	cpi	r24, 0x2D	; 45
 4d4:	91 40       	sbci	r25, 0x01	; 1
 4d6:	d0 f0       	brcs	.+52     	; 0x50c <main+0x2ca>
   {
   		longTimer = 0;
 4d8:	10 92 0c 01 	sts	0x010C, r1
 4dc:	10 92 0b 01 	sts	0x010B, r1
        //temperature measurement is refreshed during end of low power mode
         
        // ENTER POWER DOWN MODE - watchdog timed refresh
        TIMSK0 = 0; // turn off 10ms timer (by disabling its interrupt)
 4e0:	d6 01       	movw	r26, r12
 4e2:	1c 92       	st	X, r1
        SMCR = 0b00000100; //power down sleep mode
 4e4:	84 e0       	ldi	r24, 0x04	; 4
 4e6:	83 bf       	out	0x33, r24	; 51
        WDTCSR = (1<<WDCE) | (1<<WDE) | (1<<WDP3) | (1<<WDP0);    
 4e8:	89 e3       	ldi	r24, 0x39	; 57
 4ea:	88 83       	st	Y, r24
        WDTCSR = (1<<WDIE) | (1<<WDP3) | (1<<WDP0); //8sec timeout of watchdog
 4ec:	81 e6       	ldi	r24, 0x61	; 97
 4ee:	88 83       	st	Y, r24
        wdt_timer = 0;
 4f0:	10 92 0a 01 	sts	0x010A, r1
        low_power_mode = 1;
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	80 93 09 01 	sts	0x0109, r24
        Mirf.powerDown();
 4fa:	86 e2       	ldi	r24, 0x26	; 38
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 36 06 	call	0xc6c	; 0xc6c <_ZN6Nrf24l9powerDownEv>
                     		
        sleep_enable();
 502:	83 b7       	in	r24, 0x33	; 51
 504:	81 60       	ori	r24, 0x01	; 1
 506:	83 bf       	out	0x33, r24	; 51
        sleep_cpu();
 508:	88 95       	sleep
 50a:	dc ce       	rjmp	.-584    	; 0x2c4 <main+0x82>
        ReadDS1820();  	
   }
#endif   
   else //if there is no packet to be processed, we can enter idle mode to save some power
   {
	  sleep_enable();
 50c:	83 b7       	in	r24, 0x33	; 51
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	83 bf       	out	0x33, r24	; 51
	  sleep_cpu();
 512:	88 95       	sleep
	  sleep_disable();
 514:	83 b7       	in	r24, 0x33	; 51
 516:	8e 7f       	andi	r24, 0xFE	; 254
 518:	83 bf       	out	0x33, r24	; 51
 51a:	d4 ce       	rjmp	.-600    	; 0x2c4 <main+0x82>

0000051c <_ZN6Nrf24l10readPacketEP10mirfPacket>:

//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
//XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
void Nrf24l::readPacket(mirfPacket* paket)
{
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
  if (inPacketReady) {
 520:	fc 01       	movw	r30, r24
 522:	e1 54       	subi	r30, 0x41	; 65
 524:	ff 4f       	sbci	r31, 0xFF	; 255
 526:	20 81       	ld	r18, Z
 528:	22 23       	and	r18, r18
 52a:	01 f1       	breq	.+64     	; 0x56c <_ZN6Nrf24l10readPacketEP10mirfPacket+0x50>
	//we have to temporarily disable timer0 interrupt because no one else could be able to touch
	//the packet queue until we are finished
  	cli();
 52c:	f8 94       	cli
    memcpy(paket, (const void*)&rxQueue[rxPosBeg], NRF_PAYLOAD_SIZE);
 52e:	ec 01       	movw	r28, r24
 530:	cd 5a       	subi	r28, 0xAD	; 173
 532:	df 4f       	sbci	r29, 0xFF	; 255
 534:	28 81       	ld	r18, Y
 536:	fc 01       	movw	r30, r24
 538:	3b e0       	ldi	r19, 0x0B	; 11
 53a:	23 9f       	mul	r18, r19
 53c:	e0 0d       	add	r30, r0
 53e:	f1 1d       	adc	r31, r1
 540:	11 24       	eor	r1, r1
 542:	71 96       	adiw	r30, 0x11	; 17
 544:	2b e0       	ldi	r18, 0x0B	; 11
 546:	db 01       	movw	r26, r22
 548:	01 90       	ld	r0, Z+
 54a:	0d 92       	st	X+, r0
 54c:	2a 95       	dec	r18
 54e:	e1 f7       	brne	.-8      	; 0x548 <_ZN6Nrf24l10readPacketEP10mirfPacket+0x2c>
    inPacketReady--;
 550:	fc 01       	movw	r30, r24
 552:	e1 54       	subi	r30, 0x41	; 65
 554:	ff 4f       	sbci	r31, 0xFF	; 255
 556:	20 81       	ld	r18, Z
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	20 83       	st	Z, r18
    rxPosBeg++;
 55c:	28 81       	ld	r18, Y
 55e:	2f 5f       	subi	r18, 0xFF	; 255
 560:	28 83       	st	Y, r18
    if (rxPosBeg == MAX_RX_PACKET_QUEUE) rxPosBeg = 0; //rxPos could wrap.. and we are going anti clockwise
 562:	28 81       	ld	r18, Y
 564:	26 30       	cpi	r18, 0x06	; 6
 566:	09 f4       	brne	.+2      	; 0x56a <_ZN6Nrf24l10readPacketEP10mirfPacket+0x4e>
 568:	18 82       	st	Y, r1
    sei();
 56a:	78 94       	sei
  }
}
 56c:	df 91       	pop	r29
 56e:	cf 91       	pop	r28
 570:	08 95       	ret

00000572 <_ZN6Nrf24l10sendPacketEP10mirfPacket>:

uint8_t Nrf24l::sendPacket(mirfPacket* paket)
{
 572:	cf 93       	push	r28
 574:	df 93       	push	r29
  //another sending in progress, busy -> fail
  if ( (sendingStatus > 0) )
 576:	fc 01       	movw	r30, r24
 578:	e0 54       	subi	r30, 0x40	; 64
 57a:	ff 4f       	sbci	r31, 0xFF	; 255
 57c:	20 81       	ld	r18, Z
 57e:	21 11       	cpse	r18, r1
 580:	4c c0       	rjmp	.+152    	; 0x61a <_ZN6Nrf24l10sendPacketEP10mirfPacket+0xa8>
  {
     return 0;
  }

  if (txQueueSize == MAX_TX_PACKET_QUEUE) return 0;
 582:	ee 55       	subi	r30, 0x5E	; 94
 584:	f1 09       	sbc	r31, r1
 586:	20 81       	ld	r18, Z
 588:	21 30       	cpi	r18, 0x01	; 1
 58a:	09 f4       	brne	.+2      	; 0x58e <_ZN6Nrf24l10sendPacketEP10mirfPacket+0x1c>
 58c:	48 c0       	rjmp	.+144    	; 0x61e <_ZN6Nrf24l10sendPacketEP10mirfPacket+0xac>

  //set all parameters in packet
  cli();
 58e:	f8 94       	cli
  packetCounter++;
 590:	e0 5a       	subi	r30, 0xA0	; 160
 592:	ff 4f       	sbci	r31, 0xFF	; 255
 594:	20 81       	ld	r18, Z
 596:	31 e0       	ldi	r19, 0x01	; 1
 598:	32 0f       	add	r19, r18
  if (packetCounter == 0) packetCounter++; //counter cannot be 0
 59a:	11 f0       	breq	.+4      	; 0x5a0 <_ZN6Nrf24l10sendPacketEP10mirfPacket+0x2e>

  if (txQueueSize == MAX_TX_PACKET_QUEUE) return 0;

  //set all parameters in packet
  cli();
  packetCounter++;
 59c:	30 83       	st	Z, r19
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <_ZN6Nrf24l10sendPacketEP10mirfPacket+0x38>
  if (packetCounter == 0) packetCounter++; //counter cannot be 0
 5a0:	fc 01       	movw	r30, r24
 5a2:	ee 53       	subi	r30, 0x3E	; 62
 5a4:	ff 4f       	sbci	r31, 0xFF	; 255
 5a6:	2e 5f       	subi	r18, 0xFE	; 254
 5a8:	20 83       	st	Z, r18
  paket->counter = packetCounter;
 5aa:	fc 01       	movw	r30, r24
 5ac:	ee 53       	subi	r30, 0x3E	; 62
 5ae:	ff 4f       	sbci	r31, 0xFF	; 255
 5b0:	20 81       	ld	r18, Z
 5b2:	fb 01       	movw	r30, r22
 5b4:	23 83       	std	Z+3, r18	; 0x03
  paket->txAddr = devAddr;
 5b6:	fc 01       	movw	r30, r24
 5b8:	23 81       	ldd	r18, Z+3	; 0x03
 5ba:	fb 01       	movw	r30, r22
 5bc:	20 83       	st	Z, r18

  memcpy((void*)&txQueue[txPosEnd], paket, NRF_PAYLOAD_SIZE);
 5be:	ec 01       	movw	r28, r24
 5c0:	cf 59       	subi	r28, 0x9F	; 159
 5c2:	df 4f       	sbci	r29, 0xFF	; 255
 5c4:	28 81       	ld	r18, Y
 5c6:	dc 01       	movw	r26, r24
 5c8:	fb e0       	ldi	r31, 0x0B	; 11
 5ca:	2f 9f       	mul	r18, r31
 5cc:	a0 0d       	add	r26, r0
 5ce:	b1 1d       	adc	r27, r1
 5d0:	11 24       	eor	r1, r1
 5d2:	ab 5a       	subi	r26, 0xAB	; 171
 5d4:	bf 4f       	sbci	r27, 0xFF	; 255
 5d6:	2b e0       	ldi	r18, 0x0B	; 11
 5d8:	fb 01       	movw	r30, r22
 5da:	01 90       	ld	r0, Z+
 5dc:	0d 92       	st	X+, r0
 5de:	2a 95       	dec	r18
 5e0:	e1 f7       	brne	.-8      	; 0x5da <_ZN6Nrf24l10sendPacketEP10mirfPacket+0x68>

  txQueueSize++;
 5e2:	fc 01       	movw	r30, r24
 5e4:	ee 59       	subi	r30, 0x9E	; 158
 5e6:	ff 4f       	sbci	r31, 0xFF	; 255
 5e8:	20 81       	ld	r18, Z
 5ea:	2f 5f       	subi	r18, 0xFF	; 255
 5ec:	20 83       	st	Z, r18
  txPosEnd++;
 5ee:	28 81       	ld	r18, Y
 5f0:	2f 5f       	subi	r18, 0xFF	; 255
 5f2:	28 83       	st	Y, r18
  if (txPosEnd == MAX_TX_PACKET_QUEUE) txPosEnd = 0; //queue counted from 0, so on the max  number we are already out of array bounds
 5f4:	28 81       	ld	r18, Y
 5f6:	21 30       	cpi	r18, 0x01	; 1
 5f8:	09 f4       	brne	.+2      	; 0x5fc <_ZN6Nrf24l10sendPacketEP10mirfPacket+0x8a>
 5fa:	18 82       	st	Y, r1
  sendingStatus = 1; //set sign that there is sending packet pending
 5fc:	fc 01       	movw	r30, r24
 5fe:	e0 54       	subi	r30, 0x40	; 64
 600:	ff 4f       	sbci	r31, 0xFF	; 255
 602:	21 e0       	ldi	r18, 0x01	; 1
 604:	20 83       	st	Z, r18
  sendResult = 1;
 606:	31 96       	adiw	r30, 0x01	; 1
 608:	20 83       	st	Z, r18
  txAttempt = 1;
 60a:	ee 55       	subi	r30, 0x5E	; 94
 60c:	f1 09       	sbc	r31, r1
 60e:	20 83       	st	Z, r18
  sei();
 610:	78 94       	sei
  
  return packetCounter;
 612:	e1 5a       	subi	r30, 0xA1	; 161
 614:	ff 4f       	sbci	r31, 0xFF	; 255
 616:	80 81       	ld	r24, Z
 618:	03 c0       	rjmp	.+6      	; 0x620 <_ZN6Nrf24l10sendPacketEP10mirfPacket+0xae>
uint8_t Nrf24l::sendPacket(mirfPacket* paket)
{
  //another sending in progress, busy -> fail
  if ( (sendingStatus > 0) )
  {
     return 0;
 61a:	80 e0       	ldi	r24, 0x00	; 0
 61c:	01 c0       	rjmp	.+2      	; 0x620 <_ZN6Nrf24l10sendPacketEP10mirfPacket+0xae>
  }

  if (txQueueSize == MAX_TX_PACKET_QUEUE) return 0;
 61e:	80 e0       	ldi	r24, 0x00	; 0
  sendResult = 1;
  txAttempt = 1;
  sei();
  
  return packetCounter;
}
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	08 95       	ret

00000626 <_ZN6Nrf24l9createAckEP10mirfPacket>:

void Nrf24l::createAck(mirfPacket* paket)
{
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	db 01       	movw	r26, r22
  if (ackQueueSize == MAX_ACK_PACKET_QUEUE) return;
 62c:	fc 01       	movw	r30, r24
 62e:	e2 54       	subi	r30, 0x42	; 66
 630:	ff 4f       	sbci	r31, 0xFF	; 255
 632:	20 81       	ld	r18, Z
 634:	28 30       	cpi	r18, 0x08	; 8
 636:	d1 f1       	breq	.+116    	; 0x6ac <_ZN6Nrf24l9createAckEP10mirfPacket+0x86>

  #ifdef _DEBUG_
  //UDR0 = 35; //DEBUG #
  #endif
  
  ackQueue[ackPosEnd].txAddr = paket->rxAddr;
 638:	31 97       	sbiw	r30, 0x01	; 1
 63a:	40 81       	ld	r20, Z
 63c:	11 96       	adiw	r26, 0x01	; 1
 63e:	3c 91       	ld	r19, X
 640:	11 97       	sbiw	r26, 0x01	; 1
 642:	2b e0       	ldi	r18, 0x0B	; 11
 644:	ec 01       	movw	r28, r24
 646:	24 9f       	mul	r18, r20
 648:	c0 0d       	add	r28, r0
 64a:	d1 1d       	adc	r29, r1
 64c:	11 24       	eor	r1, r1
 64e:	cc 59       	subi	r28, 0x9C	; 156
 650:	df 4f       	sbci	r29, 0xFF	; 255
 652:	38 83       	st	Y, r19
  ackQueue[ackPosEnd].rxAddr = paket->txAddr;
 654:	40 81       	ld	r20, Z
 656:	3c 91       	ld	r19, X
 658:	ec 01       	movw	r28, r24
 65a:	24 9f       	mul	r18, r20
 65c:	c0 0d       	add	r28, r0
 65e:	d1 1d       	adc	r29, r1
 660:	11 24       	eor	r1, r1
 662:	cb 59       	subi	r28, 0x9B	; 155
 664:	df 4f       	sbci	r29, 0xFF	; 255
 666:	38 83       	st	Y, r19
  ackQueue[ackPosEnd].counter = paket->counter;
 668:	40 81       	ld	r20, Z
 66a:	13 96       	adiw	r26, 0x03	; 3
 66c:	3c 91       	ld	r19, X
 66e:	dc 01       	movw	r26, r24
 670:	24 9f       	mul	r18, r20
 672:	a0 0d       	add	r26, r0
 674:	b1 1d       	adc	r27, r1
 676:	11 24       	eor	r1, r1
 678:	a9 59       	subi	r26, 0x99	; 153
 67a:	bf 4f       	sbci	r27, 0xFF	; 255
 67c:	3c 93       	st	X, r19
  ackQueue[ackPosEnd].type = ACK;
 67e:	30 81       	ld	r19, Z
 680:	dc 01       	movw	r26, r24
 682:	23 9f       	mul	r18, r19
 684:	a0 0d       	add	r26, r0
 686:	b1 1d       	adc	r27, r1
 688:	11 24       	eor	r1, r1
 68a:	aa 59       	subi	r26, 0x9A	; 154
 68c:	bf 4f       	sbci	r27, 0xFF	; 255
 68e:	21 e0       	ldi	r18, 0x01	; 1
 690:	2c 93       	st	X, r18

  ackQueueSize++;
 692:	dc 01       	movw	r26, r24
 694:	a2 54       	subi	r26, 0x42	; 66
 696:	bf 4f       	sbci	r27, 0xFF	; 255
 698:	2c 91       	ld	r18, X
 69a:	2f 5f       	subi	r18, 0xFF	; 255
 69c:	2c 93       	st	X, r18
  ackPosEnd++;
 69e:	20 81       	ld	r18, Z
 6a0:	2f 5f       	subi	r18, 0xFF	; 255
 6a2:	20 83       	st	Z, r18
  if (ackPosEnd == MAX_ACK_PACKET_QUEUE) ackPosEnd = 0; //queue counted from 0, so on the max  number we are already out of array bounds
 6a4:	20 81       	ld	r18, Z
 6a6:	28 30       	cpi	r18, 0x08	; 8
 6a8:	09 f4       	brne	.+2      	; 0x6ac <_ZN6Nrf24l9createAckEP10mirfPacket+0x86>
 6aa:	10 82       	st	Z, r1
}
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	08 95       	ret

000006b2 <_ZN6Nrf24lC1Ev>:
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------
Nrf24l::Nrf24l() {
	//cePin = D9;
	//csnPin = D10;
	spi = &SPI;
 6b2:	2c ee       	ldi	r18, 0xEC	; 236
 6b4:	31 e0       	ldi	r19, 0x01	; 1
 6b6:	fc 01       	movw	r30, r24
 6b8:	35 83       	std	Z+5, r19	; 0x05
 6ba:	24 83       	std	Z+4, r18	; 0x04
	baseConfig = _BV(EN_CRC) & ~_BV(CRCO);
 6bc:	28 e0       	ldi	r18, 0x08	; 8
 6be:	22 83       	std	Z+2, r18	; 0x02
 6c0:	08 95       	ret

000006c2 <_ZN6Nrf24l4initEv>:
// Initializes pins to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
	//pinMode(cePin, OUTPUT);
	//pinMode(csnPin, OUTPUT);
	DDRB |= 0b00000110;
 6c2:	24 b1       	in	r18, 0x04	; 4
 6c4:	26 60       	ori	r18, 0x06	; 6
 6c6:	24 b9       	out	0x04, r18	; 4
  PORTB |= (1<<1);
}

inline void Nrf24l::ceLow(){
	//digitalWrite(cePin,LOW);
  PORTB &= (~(1<<1));
 6c8:	29 98       	cbi	0x05, 1	; 5
}

inline void Nrf24l::csnHi(){  //PB2
	//digitalWrite(csnPin,HIGH);
  PORTB |= (1<<2);
 6ca:	2a 9a       	sbi	0x05, 2	; 5
	DDRB |= 0b00000110;
	ceLow();
	csnHi();

	// Initialize spi module
	spi->begin();
 6cc:	fc 01       	movw	r30, r24
 6ce:	84 81       	ldd	r24, Z+4	; 0x04
 6d0:	95 81       	ldd	r25, Z+5	; 0x05
 6d2:	0e 94 53 06 	call	0xca6	; 0xca6 <_ZN6SPIlib5beginEv>
 6d6:	08 95       	ret

000006d8 <_ZN6Nrf24l10setDevAddrEh>:
void Nrf24l::setDevAddr(ADDR_TYPE addr)
// sets the unique node address
// is used during decoding of incoming packets (only packets for this address are handled)
// when transmitting packet, this address is used as SENDER adress
{
  devAddr = addr;
 6d8:	fc 01       	movw	r30, r24
 6da:	63 83       	std	Z+3, r22	; 0x03
 6dc:	08 95       	ret

000006de <_ZN6Nrf24l11nrfSpiWriteEhPhbh>:
	UDR0 = 33; //DEBUG !
	#endif
	configRegister(CONFIG, baseConfig | (_BV(PWR_UP) & ~_BV(PRIM_RX)) );
}

void Nrf24l::nrfSpiWrite(uint8_t reg, uint8_t *data, bool readData, uint8_t len) {  
 6de:	df 92       	push	r13
 6e0:	ef 92       	push	r14
 6e2:	ff 92       	push	r15
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	7c 01       	movw	r14, r24
 6ee:	ea 01       	movw	r28, r20
 6f0:	d2 2e       	mov	r13, r18
  PORTB |= (1<<2);
}

inline void Nrf24l::csnLow(){
	//digitalWrite(csnPin,LOW);
  PORTB &= (~(1<<2));
 6f2:	2a 98       	cbi	0x05, 2	; 5
}

void Nrf24l::nrfSpiWrite(uint8_t reg, uint8_t *data, bool readData, uint8_t len) {  
  csnLow();

	spi->transfer(reg);
 6f4:	fc 01       	movw	r30, r24
 6f6:	84 81       	ldd	r24, Z+4	; 0x04
 6f8:	95 81       	ldd	r25, Z+5	; 0x05
 6fa:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN6SPIlib8transferEh>

	if (data) {
 6fe:	20 97       	sbiw	r28, 0x00	; 0
 700:	79 f0       	breq	.+30     	; 0x720 <_ZN6Nrf24l11nrfSpiWriteEhPhbh+0x42>
		uint8_t i;
		for(i = 0; i < len; ++i) {
 702:	00 23       	and	r16, r16
 704:	69 f0       	breq	.+26     	; 0x720 <_ZN6Nrf24l11nrfSpiWriteEhPhbh+0x42>
 706:	10 e0       	ldi	r17, 0x00	; 0
			uint8_t readValue = spi->transfer(data[i]);
 708:	68 81       	ld	r22, Y
 70a:	f7 01       	movw	r30, r14
 70c:	84 81       	ldd	r24, Z+4	; 0x04
 70e:	95 81       	ldd	r25, Z+5	; 0x05
 710:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN6SPIlib8transferEh>

			if (readData) {
 714:	d1 10       	cpse	r13, r1
				data[i] = readValue;
 716:	88 83       	st	Y, r24

	spi->transfer(reg);

	if (data) {
		uint8_t i;
		for(i = 0; i < len; ++i) {
 718:	1f 5f       	subi	r17, 0xFF	; 255
 71a:	21 96       	adiw	r28, 0x01	; 1
 71c:	10 13       	cpse	r17, r16
 71e:	f4 cf       	rjmp	.-24     	; 0x708 <_ZN6Nrf24l11nrfSpiWriteEhPhbh+0x2a>
  PORTB &= (~(1<<1));
}

inline void Nrf24l::csnHi(){  //PB2
	//digitalWrite(csnPin,HIGH);
  PORTB |= (1<<2);
 720:	2a 9a       	sbi	0x05, 2	; 5
			}
		}
	}

	csnHi();
}
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	1f 91       	pop	r17
 728:	0f 91       	pop	r16
 72a:	ff 90       	pop	r15
 72c:	ef 90       	pop	r14
 72e:	df 90       	pop	r13
 730:	08 95       	ret

00000732 <_ZN6Nrf24l13writeRegisterEhPhh>:
    //nrfSpiWrite(255, value, true, len);
}

void Nrf24l::writeRegister(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
 732:	0f 93       	push	r16
	nrfSpiWrite((W_REGISTER | (REGISTER_MASK & reg)), value, false, len);
 734:	6f 71       	andi	r22, 0x1F	; 31
 736:	60 62       	ori	r22, 0x20	; 32
 738:	02 2f       	mov	r16, r18
 73a:	20 e0       	ldi	r18, 0x00	; 0
 73c:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Nrf24l11nrfSpiWriteEhPhbh>
}
 740:	0f 91       	pop	r16
 742:	08 95       	ret

00000744 <_ZN6Nrf24l7setADDREv>:
  devAddr = addr;
}

void Nrf24l::setADDR(void)
//sets address for RX and TX in NRF module (both the same)
{
 744:	cf 93       	push	r28
 746:	df 93       	push	r29
 748:	ec 01       	movw	r28, r24
  PORTB |= (1<<1);
}

inline void Nrf24l::ceLow(){
	//digitalWrite(cePin,LOW);
  PORTB &= (~(1<<1));
 74a:	29 98       	cbi	0x05, 1	; 5

void Nrf24l::setADDR(void)
//sets address for RX and TX in NRF module (both the same)
{
	ceLow();
	writeRegister(RX_ADDR_P0, (uint8_t*)mirf_ADDR, mirf_ADDR_LEN);
 74c:	23 e0       	ldi	r18, 0x03	; 3
 74e:	40 e0       	ldi	r20, 0x00	; 0
 750:	51 e0       	ldi	r21, 0x01	; 1
 752:	6a e0       	ldi	r22, 0x0A	; 10
 754:	0e 94 99 03 	call	0x732	; 0x732 <_ZN6Nrf24l13writeRegisterEhPhh>
	writeRegister(TX_ADDR, (uint8_t*)mirf_ADDR, mirf_ADDR_LEN);  
 758:	23 e0       	ldi	r18, 0x03	; 3
 75a:	40 e0       	ldi	r20, 0x00	; 0
 75c:	51 e0       	ldi	r21, 0x01	; 1
 75e:	60 e1       	ldi	r22, 0x10	; 16
 760:	ce 01       	movw	r24, r28
 762:	0e 94 99 03 	call	0x732	; 0x732 <_ZN6Nrf24l13writeRegisterEhPhh>
	csnHi();
}

inline void Nrf24l::ceHi(){    //PB1
	//digitalWrite(cePin,HIGH);
  PORTB |= (1<<1);
 766:	29 9a       	sbi	0x05, 1	; 5
{
	ceLow();
	writeRegister(RX_ADDR_P0, (uint8_t*)mirf_ADDR, mirf_ADDR_LEN);
	writeRegister(TX_ADDR, (uint8_t*)mirf_ADDR, mirf_ADDR_LEN);  
	ceHi();
} 
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	08 95       	ret

0000076e <_ZN6Nrf24l14configRegisterEhh>:
	configRegister(STATUS, _BV(RX_DR));   // Reset status register
}

void Nrf24l::configRegister(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
 76e:	cf 93       	push	r28
 770:	df 93       	push	r29
 772:	1f 92       	push	r1
 774:	cd b7       	in	r28, 0x3d	; 61
 776:	de b7       	in	r29, 0x3e	; 62
 778:	49 83       	std	Y+1, r20	; 0x01
	writeRegister(reg, &value, 1);
 77a:	21 e0       	ldi	r18, 0x01	; 1
 77c:	ae 01       	movw	r20, r28
 77e:	4f 5f       	subi	r20, 0xFF	; 255
 780:	5f 4f       	sbci	r21, 0xFF	; 255
 782:	0e 94 99 03 	call	0x732	; 0x732 <_ZN6Nrf24l13writeRegisterEhPhh>
}
 786:	0f 90       	pop	r0
 788:	df 91       	pop	r29
 78a:	cf 91       	pop	r28
 78c:	08 95       	ret

0000078e <_ZN6Nrf24l9powerUpRxEv>:
inline void Nrf24l::flushTx() {
	nrfSpiWrite(FLUSH_TX);
	//configRegister(STATUS, _BV(TX_DS));
}

void Nrf24l::powerUpRx() {
 78e:	cf 93       	push	r28
 790:	df 93       	push	r29
 792:	ec 01       	movw	r28, r24
	PTX = 0;
 794:	18 82       	st	Y, r1
  PORTB |= (1<<1);
}

inline void Nrf24l::ceLow(){
	//digitalWrite(cePin,LOW);
  PORTB &= (~(1<<1));
 796:	29 98       	cbi	0x05, 1	; 5

void Nrf24l::powerUpRx() {
	PTX = 0;
	ceLow();

	configRegister(CONFIG, baseConfig | _BV(PWR_UP) | _BV(PRIM_RX));
 798:	4a 81       	ldd	r20, Y+2	; 0x02
 79a:	43 60       	ori	r20, 0x03	; 3
 79c:	60 e0       	ldi	r22, 0x00	; 0
 79e:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
	configRegister(STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT)); 
 7a2:	40 e7       	ldi	r20, 0x70	; 112
 7a4:	67 e0       	ldi	r22, 0x07	; 7
 7a6:	ce 01       	movw	r24, r28
 7a8:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
	csnHi();
}

inline void Nrf24l::ceHi(){    //PB1
	//digitalWrite(cePin,HIGH);
  PORTB |= (1<<1);
 7ac:	29 9a       	sbi	0x05, 1	; 5
	configRegister(STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT)); 
	#ifdef _DEBUG_
	UDR0 = 95; //DEBUG _
	#endif
	ceHi();
}
 7ae:	df 91       	pop	r29
 7b0:	cf 91       	pop	r28
 7b2:	08 95       	ret

000007b4 <_ZN6Nrf24l9powerUpTxEv>:
void Nrf24l::flushRx(){
	nrfSpiWrite(FLUSH_RX);
}

void Nrf24l::powerUpTx() {
	PTX = 1;
 7b4:	21 e0       	ldi	r18, 0x01	; 1
 7b6:	fc 01       	movw	r30, r24
 7b8:	20 83       	st	Z, r18
  PORTB |= (1<<1);
}

inline void Nrf24l::ceLow(){
	//digitalWrite(cePin,LOW);
  PORTB &= (~(1<<1));
 7ba:	29 98       	cbi	0x05, 1	; 5
	PTX = 1;
	ceLow();
	#ifdef _DEBUG_
	UDR0 = 33; //DEBUG !
	#endif
	configRegister(CONFIG, baseConfig | (_BV(PWR_UP) & ~_BV(PRIM_RX)) );
 7bc:	42 81       	ldd	r20, Z+2	; 0x02
 7be:	42 60       	ori	r20, 0x02	; 2
 7c0:	60 e0       	ldi	r22, 0x00	; 0
 7c2:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
 7c6:	08 95       	ret

000007c8 <_ZN6Nrf24l9getStatusEv>:
	nrfSpiWrite2((R_REGISTER | (REGISTER_MASK & CD)), &rv, true, 1);
  //readRegister(CD, &rv, 1);
	return (rv & 1);
}

uint8_t Nrf24l::getStatus(){
 7c8:	0f 93       	push	r16
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	1f 92       	push	r1
 7d0:	cd b7       	in	r28, 0x3d	; 61
 7d2:	de b7       	in	r29, 0x3e	; 62
	/* Initialize with NOP so we get the first byte read back. */
	uint8_t rv = NOP_CMD;
 7d4:	2f ef       	ldi	r18, 0xFF	; 255
 7d6:	29 83       	std	Y+1, r18	; 0x01
	nrfSpiWrite((R_REGISTER | (REGISTER_MASK & STATUS)), &rv, true, 1);
 7d8:	01 e0       	ldi	r16, 0x01	; 1
 7da:	21 e0       	ldi	r18, 0x01	; 1
 7dc:	ae 01       	movw	r20, r28
 7de:	4f 5f       	subi	r20, 0xFF	; 255
 7e0:	5f 4f       	sbci	r21, 0xFF	; 255
 7e2:	67 e0       	ldi	r22, 0x07	; 7
 7e4:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Nrf24l11nrfSpiWriteEhPhbh>
  //readRegister(STATUS, &rv, 1);
	return rv;
}
 7e8:	89 81       	ldd	r24, Y+1	; 0x01
 7ea:	0f 90       	pop	r0
 7ec:	df 91       	pop	r29
 7ee:	cf 91       	pop	r28
 7f0:	0f 91       	pop	r16
 7f2:	08 95       	ret

000007f4 <_ZN6Nrf24l7flushRxEv>:
	UDR0 = 95; //DEBUG _
	#endif
	ceHi();
}

void Nrf24l::flushRx(){
 7f4:	0f 93       	push	r16
	nrfSpiWrite(FLUSH_RX);
 7f6:	00 e0       	ldi	r16, 0x00	; 0
 7f8:	20 e0       	ldi	r18, 0x00	; 0
 7fa:	40 e0       	ldi	r20, 0x00	; 0
 7fc:	50 e0       	ldi	r21, 0x00	; 0
 7fe:	62 ee       	ldi	r22, 0xE2	; 226
 800:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Nrf24l11nrfSpiWriteEhPhbh>
}
 804:	0f 91       	pop	r16
 806:	08 95       	ret

00000808 <_ZN6Nrf24l6configEv>:

void Nrf24l::config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
// NB: channel and payload must be set now.
{	
 808:	cf 93       	push	r28
 80a:	df 93       	push	r29
 80c:	ec 01       	movw	r28, r24
  configRegister(EN_AA, 0); //disable auto ack
 80e:	40 e0       	ldi	r20, 0x00	; 0
 810:	61 e0       	ldi	r22, 0x01	; 1
 812:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
  configRegister(EN_RXADDR, (1 << ERX_P0) ); //only pipe 0 receive enabled
 816:	41 e0       	ldi	r20, 0x01	; 1
 818:	62 e0       	ldi	r22, 0x02	; 2
 81a:	ce 01       	movw	r24, r28
 81c:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
  configRegister(SETUP_AW, mirf_ADDR_LEN - 2); //hw address width - mirf_ADDR_LEN bytes
 820:	41 e0       	ldi	r20, 0x01	; 1
 822:	63 e0       	ldi	r22, 0x03	; 3
 824:	ce 01       	movw	r24, r28
 826:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
  //here -2 is for normalising the value (1=3 bytes, 2=4bytes, 3=5bytes; so
  configRegister(SETUP_RETR, 0); //auto retransmission off
 82a:	40 e0       	ldi	r20, 0x00	; 0
 82c:	64 e0       	ldi	r22, 0x04	; 4
 82e:	ce 01       	movw	r24, r28
 830:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
	powerUpRx();
}

inline void Nrf24l::setRfChannel(uint8_t new_channel)
{
	channel = new_channel;
 834:	88 e7       	ldi	r24, 0x78	; 120
 836:	89 83       	std	Y+1, r24	; 0x01
	configRegister(RF_CH, new_channel);  // Set RF channel
 838:	48 e7       	ldi	r20, 0x78	; 120
 83a:	65 e0       	ldi	r22, 0x05	; 5
 83c:	ce 01       	movw	r24, r28
 83e:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
  configRegister(EN_RXADDR, (1 << ERX_P0) ); //only pipe 0 receive enabled
  configRegister(SETUP_AW, mirf_ADDR_LEN - 2); //hw address width - mirf_ADDR_LEN bytes
  //here -2 is for normalising the value (1=3 bytes, 2=4bytes, 3=5bytes; so
  configRegister(SETUP_RETR, 0); //auto retransmission off
  setRfChannel(DEFAULT_RF_CHANNEL);  // Set RF channel
  configRegister(RF_SETUP,  0b00100111 ); //250kbit, 0dbm, max gain
 842:	47 e2       	ldi	r20, 0x27	; 39
 844:	66 e0       	ldi	r22, 0x06	; 6
 846:	ce 01       	movw	r24, r28
 848:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
  configRegister(FEATURE, 0); //dynamic length disabled(1<<EN_DPL) )
 84c:	40 e0       	ldi	r20, 0x00	; 0
 84e:	6d e1       	ldi	r22, 0x1D	; 29
 850:	ce 01       	movw	r24, r28
 852:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
  configRegister(DYNPD, 0);
 856:	40 e0       	ldi	r20, 0x00	; 0
 858:	6c e1       	ldi	r22, 0x1C	; 28
 85a:	ce 01       	movw	r24, r28
 85c:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
	// Set length of incoming payload 
	configRegister(RX_PW_P0, NRF_PAYLOAD_SIZE);
 860:	4b e0       	ldi	r20, 0x0B	; 11
 862:	61 e1       	ldi	r22, 0x11	; 17
 864:	ce 01       	movw	r24, r28
 866:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
	configRegister(RX_PW_P1, NRF_PAYLOAD_SIZE);
 86a:	4b e0       	ldi	r20, 0x0B	; 11
 86c:	62 e1       	ldi	r22, 0x12	; 18
 86e:	ce 01       	movw	r24, r28
 870:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
  setADDR();
 874:	ce 01       	movw	r24, r28
 876:	0e 94 a2 03 	call	0x744	; 0x744 <_ZN6Nrf24l7setADDREv>
  
	// Start receiver 
	flushRx();
 87a:	ce 01       	movw	r24, r28
 87c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN6Nrf24l7flushRxEv>
	powerUpRx();
 880:	ce 01       	movw	r24, r28
 882:	0e 94 c7 03 	call	0x78e	; 0x78e <_ZN6Nrf24l9powerUpRxEv>
}
 886:	df 91       	pop	r29
 888:	cf 91       	pop	r28
 88a:	08 95       	ret

0000088c <_ZN6Nrf24l12nrfSpiWrite2EhPhbh>:
	}

	csnHi();
}

void Nrf24l::nrfSpiWrite2(uint8_t reg, uint8_t *data, bool readData, uint8_t len) {  
 88c:	df 92       	push	r13
 88e:	ef 92       	push	r14
 890:	ff 92       	push	r15
 892:	0f 93       	push	r16
 894:	1f 93       	push	r17
 896:	cf 93       	push	r28
 898:	df 93       	push	r29
 89a:	7c 01       	movw	r14, r24
 89c:	ea 01       	movw	r28, r20
 89e:	d2 2e       	mov	r13, r18
  PORTB |= (1<<2);
}

inline void Nrf24l::csnLow(){
	//digitalWrite(csnPin,LOW);
  PORTB &= (~(1<<2));
 8a0:	2a 98       	cbi	0x05, 2	; 5
}

void Nrf24l::nrfSpiWrite2(uint8_t reg, uint8_t *data, bool readData, uint8_t len) {  
  csnLow();

	spi->transfer(reg);
 8a2:	fc 01       	movw	r30, r24
 8a4:	84 81       	ldd	r24, Z+4	; 0x04
 8a6:	95 81       	ldd	r25, Z+5	; 0x05
 8a8:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN6SPIlib8transferEh>
  spi->transfer(255);
 8ac:	6f ef       	ldi	r22, 0xFF	; 255
 8ae:	f7 01       	movw	r30, r14
 8b0:	84 81       	ldd	r24, Z+4	; 0x04
 8b2:	95 81       	ldd	r25, Z+5	; 0x05
 8b4:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN6SPIlib8transferEh>

	if (data) {
 8b8:	20 97       	sbiw	r28, 0x00	; 0
 8ba:	79 f0       	breq	.+30     	; 0x8da <_ZN6Nrf24l12nrfSpiWrite2EhPhbh+0x4e>
		uint8_t i;
		for(i = 0; i < len; ++i) {
 8bc:	00 23       	and	r16, r16
 8be:	69 f0       	breq	.+26     	; 0x8da <_ZN6Nrf24l12nrfSpiWrite2EhPhbh+0x4e>
 8c0:	10 e0       	ldi	r17, 0x00	; 0
			uint8_t readValue = spi->transfer(data[i]);
 8c2:	68 81       	ld	r22, Y
 8c4:	f7 01       	movw	r30, r14
 8c6:	84 81       	ldd	r24, Z+4	; 0x04
 8c8:	95 81       	ldd	r25, Z+5	; 0x05
 8ca:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <_ZN6SPIlib8transferEh>

			if (readData) {
 8ce:	d1 10       	cpse	r13, r1
				data[i] = readValue;
 8d0:	88 83       	st	Y, r24
	spi->transfer(reg);
  spi->transfer(255);

	if (data) {
		uint8_t i;
		for(i = 0; i < len; ++i) {
 8d2:	1f 5f       	subi	r17, 0xFF	; 255
 8d4:	21 96       	adiw	r28, 0x01	; 1
 8d6:	10 13       	cpse	r17, r16
 8d8:	f4 cf       	rjmp	.-24     	; 0x8c2 <_ZN6Nrf24l12nrfSpiWrite2EhPhbh+0x36>
  PORTB &= (~(1<<1));
}

inline void Nrf24l::csnHi(){  //PB2
	//digitalWrite(csnPin,HIGH);
  PORTB |= (1<<2);
 8da:	2a 9a       	sbi	0x05, 2	; 5
			}
		}
	}

	csnHi();
}
 8dc:	df 91       	pop	r29
 8de:	cf 91       	pop	r28
 8e0:	1f 91       	pop	r17
 8e2:	0f 91       	pop	r16
 8e4:	ff 90       	pop	r15
 8e6:	ef 90       	pop	r14
 8e8:	df 90       	pop	r13
 8ea:	08 95       	ret

000008ec <_ZN6Nrf24l11rxFifoEmptyEv>:
		return 1;

	return !rxFifoEmpty();
}

bool Nrf24l::rxFifoEmpty(){
 8ec:	0f 93       	push	r16
 8ee:	cf 93       	push	r28
 8f0:	df 93       	push	r29
 8f2:	1f 92       	push	r1
 8f4:	cd b7       	in	r28, 0x3d	; 61
 8f6:	de b7       	in	r29, 0x3e	; 62
	uint8_t fifoStatus;

	nrfSpiWrite2((R_REGISTER | (REGISTER_MASK & FIFO_STATUS)), &fifoStatus, true, 1);
 8f8:	01 e0       	ldi	r16, 0x01	; 1
 8fa:	21 e0       	ldi	r18, 0x01	; 1
 8fc:	ae 01       	movw	r20, r28
 8fe:	4f 5f       	subi	r20, 0xFF	; 255
 900:	5f 4f       	sbci	r21, 0xFF	; 255
 902:	67 e1       	ldi	r22, 0x17	; 23
 904:	0e 94 46 04 	call	0x88c	; 0x88c <_ZN6Nrf24l12nrfSpiWrite2EhPhbh>
	//readRegister(FIFO_STATUS, &fifoStatus, sizeof(fifoStatus));

	return (fifoStatus & _BV(RX_EMPTY));
 908:	89 81       	ldd	r24, Y+1	; 0x01
}
 90a:	81 70       	andi	r24, 0x01	; 1
 90c:	0f 90       	pop	r0
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	0f 91       	pop	r16
 914:	08 95       	ret

00000916 <_ZN6Nrf24l9dataReadyEv>:
	ceHi();
} 

bool Nrf24l::dataReady() 
// Checks if data is available for reading
{
 916:	cf 93       	push	r28
 918:	df 93       	push	r29
 91a:	ec 01       	movw	r28, r24
	// See note in getData() function - just checking RX_DR isn't good enough
	uint8_t status = getStatus();
 91c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <_ZN6Nrf24l9getStatusEv>

	// We can short circuit on RX_DR, but if it's not set, we still need
	// to check the FIFO for any pending packets
	if (status & _BV(RX_DR))
 920:	86 fd       	sbrc	r24, 6
 922:	06 c0       	rjmp	.+12     	; 0x930 <_ZN6Nrf24l9dataReadyEv+0x1a>
		return 1;

	return !rxFifoEmpty();
 924:	ce 01       	movw	r24, r28
 926:	0e 94 76 04 	call	0x8ec	; 0x8ec <_ZN6Nrf24l11rxFifoEmptyEv>
 92a:	91 e0       	ldi	r25, 0x01	; 1
 92c:	89 27       	eor	r24, r25
 92e:	01 c0       	rjmp	.+2      	; 0x932 <_ZN6Nrf24l9dataReadyEv+0x1c>
	uint8_t status = getStatus();

	// We can short circuit on RX_DR, but if it's not set, we still need
	// to check the FIFO for any pending packets
	if (status & _BV(RX_DR))
		return 1;
 930:	81 e0       	ldi	r24, 0x01	; 1

	return !rxFifoEmpty();
}
 932:	df 91       	pop	r29
 934:	cf 91       	pop	r28
 936:	08 95       	ret

00000938 <_ZN6Nrf24l7getDataEPh>:
	return (fifoStatus & _BV(RX_EMPTY));
}

void Nrf24l::getData(uint8_t * data) 
// Reads payload bytes into data array
{
 938:	0f 93       	push	r16
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	ec 01       	movw	r28, r24
 940:	ab 01       	movw	r20, r22
	nrfSpiWrite2(R_RX_PAYLOAD, data, true, NRF_PAYLOAD_SIZE); // Read payload
 942:	0b e0       	ldi	r16, 0x0B	; 11
 944:	21 e0       	ldi	r18, 0x01	; 1
 946:	61 e6       	ldi	r22, 0x61	; 97
 948:	0e 94 46 04 	call	0x88c	; 0x88c <_ZN6Nrf24l12nrfSpiWrite2EhPhbh>
	//  2) clear RX_DR IRQ, 3) read FIFO_STATUS to check if there are more 
	//  payloads available in RX FIFO, 4) if there are more data in RX FIFO,
	//  repeat from step 1)."
	// So if we're going to clear RX_DR here, we need to check the RX FIFO
	// in the dataReady() function
	configRegister(STATUS, _BV(RX_DR));   // Reset status register
 94c:	40 e4       	ldi	r20, 0x40	; 64
 94e:	67 e0       	ldi	r22, 0x07	; 7
 950:	ce 01       	movw	r24, r28
 952:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>
}
 956:	df 91       	pop	r29
 958:	cf 91       	pop	r28
 95a:	0f 91       	pop	r16
 95c:	08 95       	ret

0000095e <_ZN6Nrf24l12handleRxLoopEv>:

Nrf24l Mirf = Nrf24l();

//should be run within some timered loop (really often - 10ms)
void Nrf24l::handleRxLoop(void)
{   
 95e:	2f 92       	push	r2
 960:	3f 92       	push	r3
 962:	4f 92       	push	r4
 964:	5f 92       	push	r5
 966:	6f 92       	push	r6
 968:	7f 92       	push	r7
 96a:	8f 92       	push	r8
 96c:	9f 92       	push	r9
 96e:	af 92       	push	r10
 970:	bf 92       	push	r11
 972:	cf 92       	push	r12
 974:	df 92       	push	r13
 976:	ef 92       	push	r14
 978:	ff 92       	push	r15
 97a:	0f 93       	push	r16
 97c:	1f 93       	push	r17
 97e:	cf 93       	push	r28
 980:	df 93       	push	r29
 982:	ec 01       	movw	r28, r24
  Timer++; //every time we must increment timer
 984:	fc 01       	movw	r30, r24
 986:	ed 53       	subi	r30, 0x3D	; 61
 988:	ff 4f       	sbci	r31, 0xFF	; 255
 98a:	80 81       	ld	r24, Z
 98c:	8f 5f       	subi	r24, 0xFF	; 255
 98e:	80 83       	st	Z, r24
  //UDR0 = 46; //DEBUG
  #endif
  
  //if (inPacketReady == MAX_RX_PACKET_QUEUE) return;
  //if there is full queue, return a wait for next turn
   while ( dataReady() ) //while something in rx buffer
 990:	0f 2e       	mov	r0, r31
 992:	f5 e0       	ldi	r31, 0x05	; 5
 994:	3f 2e       	mov	r3, r31
 996:	f0 2d       	mov	r31, r0
   {
	  getData( (uint8_t*) &pendingPacket);
 998:	8e 01       	movw	r16, r28
 99a:	0a 5f       	subi	r16, 0xFA	; 250
 99c:	1f 4f       	sbci	r17, 0xFF	; 255
		  {
			  //TODO: handle ACK_RESP packet payload.. propably just give it to app as it is
			  #ifdef _DEBUG_
			  UDR0 = 60; //DEBUG <
			  #endif
			  if ( ((SENDING_STATUS)sendingStatus == WAIT_ACK) && (txQueue[txPosBeg].counter == pendingPacket.counter) ) //ack for sent packet received
 99e:	5e 01       	movw	r10, r28
 9a0:	80 ec       	ldi	r24, 0xC0	; 192
 9a2:	a8 0e       	add	r10, r24
 9a4:	b1 1c       	adc	r11, r1
 9a6:	4e 01       	movw	r8, r28
 9a8:	e0 e6       	ldi	r30, 0x60	; 96
 9aa:	8e 0e       	add	r8, r30
 9ac:	91 1c       	adc	r9, r1
 9ae:	0f 2e       	mov	r0, r31
 9b0:	fb e0       	ldi	r31, 0x0B	; 11
 9b2:	2f 2e       	mov	r2, r31
 9b4:	f0 2d       	mov	r31, r0
			  {
				  sendingStatus = 0;
				  sendResult = 0;
 9b6:	2e 01       	movw	r4, r28
 9b8:	f1 ec       	ldi	r31, 0xC1	; 193
 9ba:	4f 0e       	add	r4, r31
 9bc:	51 1c       	adc	r5, r1
  if (ackPosEnd == MAX_ACK_PACKET_QUEUE) ackPosEnd = 0; //queue counted from 0, so on the max  number we are already out of array bounds
}

inline void Nrf24l::removePacketfromTxQueue(void)
{
    txQueueSize--;
 9be:	3e 01       	movw	r6, r28
 9c0:	82 e6       	ldi	r24, 0x62	; 98
 9c2:	68 0e       	add	r6, r24
 9c4:	71 1c       	adc	r7, r1
		  {
			  createAck((mirfPacket*)&pendingPacket);
		  }
		  else
		  { //other packets are saved to queue and app has to hadle them
            if (inPacketReady != MAX_RX_PACKET_QUEUE) //if queue is not full
 9c6:	6e 01       	movw	r12, r28
 9c8:	ef eb       	ldi	r30, 0xBF	; 191
 9ca:	ce 0e       	add	r12, r30
 9cc:	d1 1c       	adc	r13, r1
            {
              //last_addr_in = pendingPacket.txAddr;
              //last_packetCounter_in = pendingPacket.counter;
                            
			  memcpy((void*)&rxQueue[rxPosEnd], (mirfPacket*)&pendingPacket, NRF_PAYLOAD_SIZE);
 9ce:	7e 01       	movw	r14, r28
 9d0:	f4 e5       	ldi	r31, 0x54	; 84
 9d2:	ef 0e       	add	r14, r31
 9d4:	f1 1c       	adc	r15, r1
  //UDR0 = 46; //DEBUG
  #endif
  
  //if (inPacketReady == MAX_RX_PACKET_QUEUE) return;
  //if there is full queue, return a wait for next turn
   while ( dataReady() ) //while something in rx buffer
 9d6:	53 c0       	rjmp	.+166    	; 0xa7e <_ZN6Nrf24l12handleRxLoopEv+0x120>
   {
	  getData( (uint8_t*) &pendingPacket);
 9d8:	b8 01       	movw	r22, r16
 9da:	ce 01       	movw	r24, r28
 9dc:	0e 94 9c 04 	call	0x938	; 0x938 <_ZN6Nrf24l7getDataEPh>
      
	  if ( (pendingPacket.rxAddr == devAddr) || (pendingPacket.rxAddr == MULTICAST_ADDR) )
 9e0:	9f 81       	ldd	r25, Y+7	; 0x07
 9e2:	8b 81       	ldd	r24, Y+3	; 0x03
 9e4:	98 17       	cp	r25, r24
 9e6:	21 f0       	breq	.+8      	; 0x9f0 <_ZN6Nrf24l12handleRxLoopEv+0x92>
 9e8:	8f 81       	ldd	r24, Y+7	; 0x07
 9ea:	8f 3f       	cpi	r24, 0xFF	; 255
 9ec:	09 f0       	breq	.+2      	; 0x9f0 <_ZN6Nrf24l12handleRxLoopEv+0x92>
 9ee:	45 c0       	rjmp	.+138    	; 0xa7a <_ZN6Nrf24l12handleRxLoopEv+0x11c>
	  { //is the packet for this device? or multicast
		  if ( ((PACKET_TYPE)pendingPacket.type == ACK) || ((PACKET_TYPE)pendingPacket.type == ACK_RESP) )
 9f0:	88 85       	ldd	r24, Y+8	; 0x08
 9f2:	81 30       	cpi	r24, 0x01	; 1
 9f4:	19 f0       	breq	.+6      	; 0x9fc <_ZN6Nrf24l12handleRxLoopEv+0x9e>
 9f6:	88 85       	ldd	r24, Y+8	; 0x08
 9f8:	82 30       	cpi	r24, 0x02	; 2
 9fa:	a9 f4       	brne	.+42     	; 0xa26 <_ZN6Nrf24l12handleRxLoopEv+0xc8>
		  {
			  //TODO: handle ACK_RESP packet payload.. propably just give it to app as it is
			  #ifdef _DEBUG_
			  UDR0 = 60; //DEBUG <
			  #endif
			  if ( ((SENDING_STATUS)sendingStatus == WAIT_ACK) && (txQueue[txPosBeg].counter == pendingPacket.counter) ) //ack for sent packet received
 9fc:	f5 01       	movw	r30, r10
 9fe:	80 81       	ld	r24, Z
 a00:	83 30       	cpi	r24, 0x03	; 3
 a02:	d9 f5       	brne	.+118    	; 0xa7a <_ZN6Nrf24l12handleRxLoopEv+0x11c>
 a04:	f4 01       	movw	r30, r8
 a06:	80 81       	ld	r24, Z
 a08:	fe 01       	movw	r30, r28
 a0a:	28 9e       	mul	r2, r24
 a0c:	e0 0d       	add	r30, r0
 a0e:	f1 1d       	adc	r31, r1
 a10:	11 24       	eor	r1, r1
 a12:	e8 5a       	subi	r30, 0xA8	; 168
 a14:	ff 4f       	sbci	r31, 0xFF	; 255
 a16:	90 81       	ld	r25, Z
 a18:	89 85       	ldd	r24, Y+9	; 0x09
 a1a:	98 13       	cpse	r25, r24
 a1c:	2e c0       	rjmp	.+92     	; 0xa7a <_ZN6Nrf24l12handleRxLoopEv+0x11c>
 a1e:	35 c0       	rjmp	.+106    	; 0xa8a <_ZN6Nrf24l12handleRxLoopEv+0x12c>

inline void Nrf24l::removePacketfromTxQueue(void)
{
    txQueueSize--;
    txPosBeg++;
    if (txPosBeg == MAX_TX_PACKET_QUEUE) txPosBeg = 0; //rxPos could wrap.. and we are going anti clockwise
 a20:	f4 01       	movw	r30, r8
 a22:	10 82       	st	Z, r1
 a24:	2a c0       	rjmp	.+84     	; 0xa7a <_ZN6Nrf24l12handleRxLoopEv+0x11c>
				  //remove sent packet from queue
				  //and add confirmation to confirmed queue
				  //addConfirmedPacket(pendingPacket.counter);
			  }
		  }
		  else if (pendingPacket.type == PING)
 a26:	88 85       	ldd	r24, Y+8	; 0x08
 a28:	89 30       	cpi	r24, 0x09	; 9
 a2a:	29 f4       	brne	.+10     	; 0xa36 <_ZN6Nrf24l12handleRxLoopEv+0xd8>
		  {
			  createAck((mirfPacket*)&pendingPacket);
 a2c:	b8 01       	movw	r22, r16
 a2e:	ce 01       	movw	r24, r28
 a30:	0e 94 13 03 	call	0x626	; 0x626 <_ZN6Nrf24l9createAckEP10mirfPacket>
 a34:	22 c0       	rjmp	.+68     	; 0xa7a <_ZN6Nrf24l12handleRxLoopEv+0x11c>
		  }
		  else
		  { //other packets are saved to queue and app has to hadle them
            if (inPacketReady != MAX_RX_PACKET_QUEUE) //if queue is not full
 a36:	f6 01       	movw	r30, r12
 a38:	80 81       	ld	r24, Z
 a3a:	86 30       	cpi	r24, 0x06	; 6
 a3c:	f1 f0       	breq	.+60     	; 0xa7a <_ZN6Nrf24l12handleRxLoopEv+0x11c>
            {
              //last_addr_in = pendingPacket.txAddr;
              //last_packetCounter_in = pendingPacket.counter;
                            
			  memcpy((void*)&rxQueue[rxPosEnd], (mirfPacket*)&pendingPacket, NRF_PAYLOAD_SIZE);
 a3e:	f7 01       	movw	r30, r14
 a40:	80 81       	ld	r24, Z
 a42:	de 01       	movw	r26, r28
 a44:	28 9e       	mul	r2, r24
 a46:	a0 0d       	add	r26, r0
 a48:	b1 1d       	adc	r27, r1
 a4a:	11 24       	eor	r1, r1
 a4c:	51 96       	adiw	r26, 0x11	; 17
 a4e:	f8 01       	movw	r30, r16
 a50:	82 2d       	mov	r24, r2
 a52:	01 90       	ld	r0, Z+
 a54:	0d 92       	st	X+, r0
 a56:	8a 95       	dec	r24
 a58:	e1 f7       	brne	.-8      	; 0xa52 <_ZN6Nrf24l12handleRxLoopEv+0xf4>
			  inPacketReady++;
 a5a:	f6 01       	movw	r30, r12
 a5c:	80 81       	ld	r24, Z
 a5e:	8f 5f       	subi	r24, 0xFF	; 255
 a60:	80 83       	st	Z, r24
			  rxPosEnd++;
 a62:	f7 01       	movw	r30, r14
 a64:	80 81       	ld	r24, Z
 a66:	8f 5f       	subi	r24, 0xFF	; 255
 a68:	80 83       	st	Z, r24
			  if (rxPosEnd == MAX_RX_PACKET_QUEUE) rxPosEnd = 0; //queue counted from 0, so on the max  number we are already out of array bounds
 a6a:	80 81       	ld	r24, Z
 a6c:	86 30       	cpi	r24, 0x06	; 6
 a6e:	09 f4       	brne	.+2      	; 0xa72 <_ZN6Nrf24l12handleRxLoopEv+0x114>
 a70:	10 82       	st	Z, r1
			  createAck((mirfPacket*)&pendingPacket);
 a72:	b8 01       	movw	r22, r16
 a74:	ce 01       	movw	r24, r28
 a76:	0e 94 13 03 	call	0x626	; 0x626 <_ZN6Nrf24l9createAckEP10mirfPacket>
 a7a:	3a 94       	dec	r3
      
      //we have to have some theoretical limit staying in this function
      //because if there were too much incoming packets all the time,
      //then this function would never end
      innerCounter++;
      if (innerCounter == 5) break;
 a7c:	b1 f0       	breq	.+44     	; 0xaaa <_ZN6Nrf24l12handleRxLoopEv+0x14c>
  //UDR0 = 46; //DEBUG
  #endif
  
  //if (inPacketReady == MAX_RX_PACKET_QUEUE) return;
  //if there is full queue, return a wait for next turn
   while ( dataReady() ) //while something in rx buffer
 a7e:	ce 01       	movw	r24, r28
 a80:	0e 94 8b 04 	call	0x916	; 0x916 <_ZN6Nrf24l9dataReadyEv>
 a84:	81 11       	cpse	r24, r1
 a86:	a8 cf       	rjmp	.-176    	; 0x9d8 <_ZN6Nrf24l12handleRxLoopEv+0x7a>
 a88:	10 c0       	rjmp	.+32     	; 0xaaa <_ZN6Nrf24l12handleRxLoopEv+0x14c>
			  #ifdef _DEBUG_
			  UDR0 = 60; //DEBUG <
			  #endif
			  if ( ((SENDING_STATUS)sendingStatus == WAIT_ACK) && (txQueue[txPosBeg].counter == pendingPacket.counter) ) //ack for sent packet received
			  {
				  sendingStatus = 0;
 a8a:	f5 01       	movw	r30, r10
 a8c:	10 82       	st	Z, r1
				  sendResult = 0;
 a8e:	f2 01       	movw	r30, r4
 a90:	10 82       	st	Z, r1
  if (ackPosEnd == MAX_ACK_PACKET_QUEUE) ackPosEnd = 0; //queue counted from 0, so on the max  number we are already out of array bounds
}

inline void Nrf24l::removePacketfromTxQueue(void)
{
    txQueueSize--;
 a92:	f3 01       	movw	r30, r6
 a94:	80 81       	ld	r24, Z
 a96:	81 50       	subi	r24, 0x01	; 1
 a98:	80 83       	st	Z, r24
    txPosBeg++;
 a9a:	f4 01       	movw	r30, r8
 a9c:	80 81       	ld	r24, Z
 a9e:	8f 5f       	subi	r24, 0xFF	; 255
 aa0:	80 83       	st	Z, r24
    if (txPosBeg == MAX_TX_PACKET_QUEUE) txPosBeg = 0; //rxPos could wrap.. and we are going anti clockwise
 aa2:	80 81       	ld	r24, Z
 aa4:	81 30       	cpi	r24, 0x01	; 1
 aa6:	49 f7       	brne	.-46     	; 0xa7a <_ZN6Nrf24l12handleRxLoopEv+0x11c>
 aa8:	bb cf       	rjmp	.-138    	; 0xa20 <_ZN6Nrf24l12handleRxLoopEv+0xc2>
      //because if there were too much incoming packets all the time,
      //then this function would never end
      innerCounter++;
      if (innerCounter == 5) break;
   }
}
 aaa:	df 91       	pop	r29
 aac:	cf 91       	pop	r28
 aae:	1f 91       	pop	r17
 ab0:	0f 91       	pop	r16
 ab2:	ff 90       	pop	r15
 ab4:	ef 90       	pop	r14
 ab6:	df 90       	pop	r13
 ab8:	cf 90       	pop	r12
 aba:	bf 90       	pop	r11
 abc:	af 90       	pop	r10
 abe:	9f 90       	pop	r9
 ac0:	8f 90       	pop	r8
 ac2:	7f 90       	pop	r7
 ac4:	6f 90       	pop	r6
 ac6:	5f 90       	pop	r5
 ac8:	4f 90       	pop	r4
 aca:	3f 90       	pop	r3
 acc:	2f 90       	pop	r2
 ace:	08 95       	ret

00000ad0 <_ZN6Nrf24l9isSendingEv>:
 *
 * Test if chip is still sending.
 * When sending has finished return chip to listening.
 *
 */
volatile bool Nrf24l::isSending() {
 ad0:	ef 92       	push	r14
 ad2:	ff 92       	push	r15
 ad4:	0f 93       	push	r16
 ad6:	cf 93       	push	r28
 ad8:	df 93       	push	r29
 ada:	1f 92       	push	r1
 adc:	cd b7       	in	r28, 0x3d	; 61
 ade:	de b7       	in	r29, 0x3e	; 62
 ae0:	7c 01       	movw	r14, r24
	uint8_t status;
	if(PTX){
 ae2:	fc 01       	movw	r30, r24
 ae4:	80 81       	ld	r24, Z
 ae6:	88 23       	and	r24, r24
 ae8:	89 f0       	breq	.+34     	; 0xb0c <_ZN6Nrf24l9isSendingEv+0x3c>
		nrfSpiWrite2((R_REGISTER | (REGISTER_MASK & FIFO_STATUS)), &status, true, 1);
 aea:	01 e0       	ldi	r16, 0x01	; 1
 aec:	21 e0       	ldi	r18, 0x01	; 1
 aee:	ae 01       	movw	r20, r28
 af0:	4f 5f       	subi	r20, 0xFF	; 255
 af2:	5f 4f       	sbci	r21, 0xFF	; 255
 af4:	67 e1       	ldi	r22, 0x17	; 23
 af6:	c7 01       	movw	r24, r14
 af8:	0e 94 46 04 	call	0x88c	; 0x88c <_ZN6Nrf24l12nrfSpiWrite2EhPhbh>
	    	
		/*
		 *  if sending successful (TX_DS) or max retries exceded (MAX_RT).
		 */

		if( (status & (1 << TX_EMPTY)) ){
 afc:	89 81       	ldd	r24, Y+1	; 0x01
 afe:	84 ff       	sbrs	r24, 4
 b00:	07 c0       	rjmp	.+14     	; 0xb10 <_ZN6Nrf24l9isSendingEv+0x40>
			powerUpRx();
 b02:	c7 01       	movw	r24, r14
 b04:	0e 94 c7 03 	call	0x78e	; 0x78e <_ZN6Nrf24l9powerUpRxEv>
			return false; 
 b08:	80 e0       	ldi	r24, 0x00	; 0
 b0a:	03 c0       	rjmp	.+6      	; 0xb12 <_ZN6Nrf24l9isSendingEv+0x42>
		}

		return true;
	}
	return false;
 b0c:	80 e0       	ldi	r24, 0x00	; 0
 b0e:	01 c0       	rjmp	.+2      	; 0xb12 <_ZN6Nrf24l9isSendingEv+0x42>
		if( (status & (1 << TX_EMPTY)) ){
			powerUpRx();
			return false; 
		}

		return true;
 b10:	81 e0       	ldi	r24, 0x01	; 1
	}
	return false;
}
 b12:	0f 90       	pop	r0
 b14:	df 91       	pop	r29
 b16:	cf 91       	pop	r28
 b18:	0f 91       	pop	r16
 b1a:	ff 90       	pop	r15
 b1c:	ef 90       	pop	r14
 b1e:	08 95       	ret

00000b20 <_ZN6Nrf24l12handleTxLoopEv>:
      if (innerCounter == 5) break;
   }
}

void Nrf24l::handleTxLoop(void) //probably should be run from main program loop, because can be time consuming in wait for finished tx
{
 b20:	cf 92       	push	r12
 b22:	df 92       	push	r13
 b24:	ef 92       	push	r14
 b26:	ff 92       	push	r15
 b28:	0f 93       	push	r16
 b2a:	cf 93       	push	r28
 b2c:	df 93       	push	r29
 b2e:	ec 01       	movw	r28, r24
	uint8_t whatToSend = 0; //0 = nothing, 1 = ack, 2 = user packet

    //if there is some ack waiting
	  if (1) //(Timer == TimerNewAttempt)
	  {
		if ( (ackQueueSize > 0) )
 b30:	fc 01       	movw	r30, r24
 b32:	e2 54       	subi	r30, 0x42	; 66
 b34:	ff 4f       	sbci	r31, 0xFF	; 255
 b36:	80 81       	ld	r24, Z
 b38:	88 23       	and	r24, r24
 b3a:	91 f1       	breq	.+100    	; 0xba0 <_ZN6Nrf24l12handleTxLoopEv+0x80>
		{
			pPaket = (uint8_t *)&ackQueue[ackPosBeg];
 b3c:	7e 01       	movw	r14, r28
 b3e:	2c eb       	ldi	r18, 0xBC	; 188
 b40:	e2 0e       	add	r14, r18
 b42:	f1 1c       	adc	r15, r1
 b44:	f7 01       	movw	r30, r14
 b46:	80 81       	ld	r24, Z
 b48:	9e 01       	movw	r18, r28
 b4a:	4b e0       	ldi	r20, 0x0B	; 11
 b4c:	84 9f       	mul	r24, r20
 b4e:	20 0d       	add	r18, r0
 b50:	31 1d       	adc	r19, r1
 b52:	11 24       	eor	r1, r1
 b54:	f9 01       	movw	r30, r18
 b56:	ec 59       	subi	r30, 0x9C	; 156
 b58:	ff 4f       	sbci	r31, 0xFF	; 255
 b5a:	6f 01       	movw	r12, r30
  //readRegister(STATUS, &rv, 1);
	return rv;
}

inline void Nrf24l::flushTx() {
	nrfSpiWrite(FLUSH_TX);
 b5c:	00 e0       	ldi	r16, 0x00	; 0
 b5e:	20 e0       	ldi	r18, 0x00	; 0
 b60:	40 e0       	ldi	r20, 0x00	; 0
 b62:	50 e0       	ldi	r21, 0x00	; 0
 b64:	61 ee       	ldi	r22, 0xE1	; 225
 b66:	ce 01       	movw	r24, r28
 b68:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Nrf24l11nrfSpiWriteEhPhbh>
	if ( whatToSend > 0 ) //new packet in fifo waiting to be sent
    {      

      flushTx();
      //write user packet to fifo       
      nrfSpiWrite(W_TX_PAYLOAD, pPaket, false, NRF_PAYLOAD_SIZE);  
 b6c:	0b e0       	ldi	r16, 0x0B	; 11
 b6e:	20 e0       	ldi	r18, 0x00	; 0
 b70:	a6 01       	movw	r20, r12
 b72:	60 ea       	ldi	r22, 0xA0	; 160
 b74:	ce 01       	movw	r24, r28
 b76:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Nrf24l11nrfSpiWriteEhPhbh>
      
      if ( 1 ) //getCarrier()==0 ) //no carrier detected (free air/free to send)
      {
        powerUpTx();       // Set to transmitter mode , Power up
 b7a:	ce 01       	movw	r24, r28
 b7c:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN6Nrf24l9powerUpTxEv>
	csnHi();
}

inline void Nrf24l::ceHi(){    //PB1
	//digitalWrite(cePin,HIGH);
  PORTB |= (1<<1);
 b80:	29 9a       	sbi	0x05, 1	; 5
    if (txPosBeg == MAX_TX_PACKET_QUEUE) txPosBeg = 0; //rxPos could wrap.. and we are going anti clockwise
}

inline void Nrf24l::removePacketfromAckQueue(void)
{
    ackQueueSize--;
 b82:	fe 01       	movw	r30, r28
 b84:	e2 54       	subi	r30, 0x42	; 66
 b86:	ff 4f       	sbci	r31, 0xFF	; 255
 b88:	80 81       	ld	r24, Z
 b8a:	81 50       	subi	r24, 0x01	; 1
 b8c:	80 83       	st	Z, r24
    ackPosBeg++;
 b8e:	f7 01       	movw	r30, r14
 b90:	80 81       	ld	r24, Z
 b92:	8f 5f       	subi	r24, 0xFF	; 255
 b94:	80 83       	st	Z, r24
    if (ackPosBeg == MAX_ACK_PACKET_QUEUE) ackPosBeg = 0; //rxPos could wrap.. and we are going anti clockwise
 b96:	80 81       	ld	r24, Z
 b98:	88 30       	cpi	r24, 0x08	; 8
 b9a:	09 f0       	breq	.+2      	; 0xb9e <_ZN6Nrf24l12handleTxLoopEv+0x7e>
 b9c:	3c c0       	rjmp	.+120    	; 0xc16 <_ZN6Nrf24l12handleTxLoopEv+0xf6>
 b9e:	35 c0       	rjmp	.+106    	; 0xc0a <_ZN6Nrf24l12handleTxLoopEv+0xea>
			//UDR0 = 61; //DEBUG =
			#endif
		}
		else
		{
		   if ( (sendingStatus == IN_FIFO) || (sendingStatus == WAIT_FREE_AIR) ) //new packet in fifo waiting to be sent
 ba0:	fe 01       	movw	r30, r28
 ba2:	e0 54       	subi	r30, 0x40	; 64
 ba4:	ff 4f       	sbci	r31, 0xFF	; 255
 ba6:	80 81       	ld	r24, Z
 ba8:	81 30       	cpi	r24, 0x01	; 1
 baa:	19 f0       	breq	.+6      	; 0xbb2 <_ZN6Nrf24l12handleTxLoopEv+0x92>
 bac:	80 81       	ld	r24, Z
 bae:	82 30       	cpi	r24, 0x02	; 2
 bb0:	b9 f5       	brne	.+110    	; 0xc20 <_ZN6Nrf24l12handleTxLoopEv+0x100>
		   {
			   pPaket = (uint8_t *)&txQueue[txPosBeg];
 bb2:	fe 01       	movw	r30, r28
 bb4:	e0 5a       	subi	r30, 0xA0	; 160
 bb6:	ff 4f       	sbci	r31, 0xFF	; 255
 bb8:	80 81       	ld	r24, Z
 bba:	9e 01       	movw	r18, r28
 bbc:	4b e0       	ldi	r20, 0x0B	; 11
 bbe:	84 9f       	mul	r24, r20
 bc0:	20 0d       	add	r18, r0
 bc2:	31 1d       	adc	r19, r1
 bc4:	11 24       	eor	r1, r1
 bc6:	f9 01       	movw	r30, r18
 bc8:	eb 5a       	subi	r30, 0xAB	; 171
 bca:	ff 4f       	sbci	r31, 0xFF	; 255
 bcc:	7f 01       	movw	r14, r30
  //readRegister(STATUS, &rv, 1);
	return rv;
}

inline void Nrf24l::flushTx() {
	nrfSpiWrite(FLUSH_TX);
 bce:	00 e0       	ldi	r16, 0x00	; 0
 bd0:	20 e0       	ldi	r18, 0x00	; 0
 bd2:	40 e0       	ldi	r20, 0x00	; 0
 bd4:	50 e0       	ldi	r21, 0x00	; 0
 bd6:	61 ee       	ldi	r22, 0xE1	; 225
 bd8:	ce 01       	movw	r24, r28
 bda:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Nrf24l11nrfSpiWriteEhPhbh>
	if ( whatToSend > 0 ) //new packet in fifo waiting to be sent
    {      

      flushTx();
      //write user packet to fifo       
      nrfSpiWrite(W_TX_PAYLOAD, pPaket, false, NRF_PAYLOAD_SIZE);  
 bde:	0b e0       	ldi	r16, 0x0B	; 11
 be0:	20 e0       	ldi	r18, 0x00	; 0
 be2:	a7 01       	movw	r20, r14
 be4:	60 ea       	ldi	r22, 0xA0	; 160
 be6:	ce 01       	movw	r24, r28
 be8:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Nrf24l11nrfSpiWriteEhPhbh>
      
      if ( 1 ) //getCarrier()==0 ) //no carrier detected (free air/free to send)
      {
        powerUpTx();       // Set to transmitter mode , Power up
 bec:	ce 01       	movw	r24, r28
 bee:	0e 94 da 03 	call	0x7b4	; 0x7b4 <_ZN6Nrf24l9powerUpTxEv>
	csnHi();
}

inline void Nrf24l::ceHi(){    //PB1
	//digitalWrite(cePin,HIGH);
  PORTB |= (1<<1);
 bf2:	29 9a       	sbi	0x05, 1	; 5
			#endif
      	}
        else  //if it was not ack packet, then it was for sure user packet
      	 //if ( (whatToSend >> 1) == 1) //if there was also user packet
        {
      		sendingStatus = WAIT_ACK;
 bf4:	83 e0       	ldi	r24, 0x03	; 3
 bf6:	fe 01       	movw	r30, r28
 bf8:	e0 54       	subi	r30, 0x40	; 64
 bfa:	ff 4f       	sbci	r31, 0xFF	; 255
 bfc:	80 83       	st	Z, r24
      		ackTimeoutTimer = Timer + MAX_ACK_WAIT_TIME;
 bfe:	33 96       	adiw	r30, 0x03	; 3
 c00:	80 81       	ld	r24, Z
 c02:	8d 5f       	subi	r24, 0xFD	; 253
 c04:	32 96       	adiw	r30, 0x02	; 2
 c06:	80 83       	st	Z, r24
 c08:	06 c0       	rjmp	.+12     	; 0xc16 <_ZN6Nrf24l12handleTxLoopEv+0xf6>

inline void Nrf24l::removePacketfromAckQueue(void)
{
    ackQueueSize--;
    ackPosBeg++;
    if (ackPosBeg == MAX_ACK_PACKET_QUEUE) ackPosBeg = 0; //rxPos could wrap.. and we are going anti clockwise
 c0a:	fe 01       	movw	r30, r28
 c0c:	e4 54       	subi	r30, 0x44	; 68
 c0e:	ff 4f       	sbci	r31, 0xFF	; 255
 c10:	10 82       	st	Z, r1
 c12:	01 c0       	rjmp	.+2      	; 0xc16 <_ZN6Nrf24l12handleTxLoopEv+0xf6>
        {
      		sendingStatus = WAIT_ACK;
      		ackTimeoutTimer = Timer + MAX_ACK_WAIT_TIME;
      	}

        while ( isSending() ) NOP_ASM //wait for end of transfer and immediately start RX mode
 c14:	00 00       	nop
 c16:	ce 01       	movw	r24, r28
 c18:	0e 94 68 05 	call	0xad0	; 0xad0 <_ZN6Nrf24l9isSendingEv>
 c1c:	81 11       	cpse	r24, r1
 c1e:	fa cf       	rjmp	.-12     	; 0xc14 <_ZN6Nrf24l12handleTxLoopEv+0xf4>
		#endif
    }
    */
    
    //check if there was TIMEOUT in waiting for ACK
    if ( (SENDING_STATUS)sendingStatus == WAIT_ACK) //check whether timeout waiting for ack occured
 c20:	fe 01       	movw	r30, r28
 c22:	e0 54       	subi	r30, 0x40	; 64
 c24:	ff 4f       	sbci	r31, 0xFF	; 255
 c26:	80 81       	ld	r24, Z
 c28:	83 30       	cpi	r24, 0x03	; 3
 c2a:	c1 f4       	brne	.+48     	; 0xc5c <_ZN6Nrf24l12handleTxLoopEv+0x13c>
    {
       if (Timer == ackTimeoutTimer)
 c2c:	33 96       	adiw	r30, 0x03	; 3
 c2e:	90 81       	ld	r25, Z
 c30:	32 96       	adiw	r30, 0x02	; 2
 c32:	80 81       	ld	r24, Z
 c34:	98 13       	cpse	r25, r24
 c36:	12 c0       	rjmp	.+36     	; 0xc5c <_ZN6Nrf24l12handleTxLoopEv+0x13c>
       {
         sendingStatus = 0; //must be set to 0 to be able to send another packets
 c38:	35 97       	sbiw	r30, 0x05	; 5
 c3a:	10 82       	st	Z, r1
         sendResult = TIMEOUT;
 c3c:	84 e0       	ldi	r24, 0x04	; 4
 c3e:	31 96       	adiw	r30, 0x01	; 1
 c40:	80 83       	st	Z, r24
  if (ackPosEnd == MAX_ACK_PACKET_QUEUE) ackPosEnd = 0; //queue counted from 0, so on the max  number we are already out of array bounds
}

inline void Nrf24l::removePacketfromTxQueue(void)
{
    txQueueSize--;
 c42:	ef 55       	subi	r30, 0x5F	; 95
 c44:	f1 09       	sbc	r31, r1
 c46:	80 81       	ld	r24, Z
 c48:	81 50       	subi	r24, 0x01	; 1
 c4a:	80 83       	st	Z, r24
    txPosBeg++;
 c4c:	32 97       	sbiw	r30, 0x02	; 2
 c4e:	80 81       	ld	r24, Z
 c50:	8f 5f       	subi	r24, 0xFF	; 255
 c52:	80 83       	st	Z, r24
    if (txPosBeg == MAX_TX_PACKET_QUEUE) txPosBeg = 0; //rxPos could wrap.. and we are going anti clockwise
 c54:	80 81       	ld	r24, Z
 c56:	81 30       	cpi	r24, 0x01	; 1
 c58:	09 f4       	brne	.+2      	; 0xc5c <_ZN6Nrf24l12handleTxLoopEv+0x13c>
 c5a:	10 82       	st	Z, r1
		 #ifdef _DEBUG_
         UDR0 = 94; //DEBUG sipka nahoru
		 #endif
       }
    }
}
 c5c:	df 91       	pop	r29
 c5e:	cf 91       	pop	r28
 c60:	0f 91       	pop	r16
 c62:	ff 90       	pop	r15
 c64:	ef 90       	pop	r14
 c66:	df 90       	pop	r13
 c68:	cf 90       	pop	r12
 c6a:	08 95       	ret

00000c6c <_ZN6Nrf24l9powerDownEv>:
inline void Nrf24l::csnLow(){
	//digitalWrite(csnPin,LOW);
  PORTB &= (~(1<<2));
}

void Nrf24l::powerDown(){
 c6c:	0f 93       	push	r16
 c6e:	cf 93       	push	r28
 c70:	df 93       	push	r29
 c72:	ec 01       	movw	r28, r24
  PORTB |= (1<<1);
}

inline void Nrf24l::ceLow(){
	//digitalWrite(cePin,LOW);
  PORTB &= (~(1<<1));
 c74:	29 98       	cbi	0x05, 1	; 5
}

void Nrf24l::powerDown(){
	ceLow();

	configRegister(CONFIG, baseConfig);
 c76:	4a 81       	ldd	r20, Y+2	; 0x02
 c78:	60 e0       	ldi	r22, 0x00	; 0
 c7a:	0e 94 b7 03 	call	0x76e	; 0x76e <_ZN6Nrf24l14configRegisterEhh>

	flushRx();
 c7e:	ce 01       	movw	r24, r28
 c80:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <_ZN6Nrf24l7flushRxEv>
  //readRegister(STATUS, &rv, 1);
	return rv;
}

inline void Nrf24l::flushTx() {
	nrfSpiWrite(FLUSH_TX);
 c84:	00 e0       	ldi	r16, 0x00	; 0
 c86:	20 e0       	ldi	r18, 0x00	; 0
 c88:	40 e0       	ldi	r20, 0x00	; 0
 c8a:	50 e0       	ldi	r21, 0x00	; 0
 c8c:	61 ee       	ldi	r22, 0xE1	; 225
 c8e:	ce 01       	movw	r24, r28
 c90:	0e 94 6f 03 	call	0x6de	; 0x6de <_ZN6Nrf24l11nrfSpiWriteEhPhbh>

	configRegister(CONFIG, baseConfig);

	flushRx();
	flushTx();
}
 c94:	df 91       	pop	r29
 c96:	cf 91       	pop	r28
 c98:	0f 91       	pop	r16
 c9a:	08 95       	ret

00000c9c <_GLOBAL__sub_I_Mirf>:
#include <string.h>
#include <stdlib.h>
#include "Mirf_nRF24L01.h"
#include "Mirf.h"

Nrf24l Mirf = Nrf24l();
 c9c:	86 e2       	ldi	r24, 0x26	; 38
 c9e:	91 e0       	ldi	r25, 0x01	; 1
 ca0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <_ZN6Nrf24lC1Ev>
 ca4:	08 95       	ret

00000ca6 <_ZN6SPIlib5beginEv>:
}

void SPIlib::begin(void)
{
    // Set MOSI, SCK as Output
    DDRB |= (1<<3)|(1<<5);
 ca6:	84 b1       	in	r24, 0x04	; 4
 ca8:	88 62       	ori	r24, 0x28	; 40
 caa:	84 b9       	out	0x04, r24	; 4
	//pinMode(PIN_SCK, OUTPUT);
	//digitalWrite(PIN_MISO, HIGH); //will connect pull up resistor
   
    // Enable SPI, Set as Master
    //Prescaler: Fosc/2, Enable Interrupts
    SPCR = (1<<SPE)|(1<<MSTR);
 cac:	80 e5       	ldi	r24, 0x50	; 80
 cae:	8c bd       	out	0x2c, r24	; 44
	SPSR = 1; //1
 cb0:	81 e0       	ldi	r24, 0x01	; 1
 cb2:	8d bd       	out	0x2d, r24	; 45
 cb4:	08 95       	ret

00000cb6 <_ZN6SPIlib8transferEh>:

//Function to send and receive data for both master and slave
uint8_t SPIlib::transfer (uint8_t data)
{
    // Load data into the buffer
    SPDR = data;
 cb6:	6e bd       	out	0x2e, r22	; 46
 
    //Wait until transmission complete
    while(!(SPSR)&(1<<SPIF));
 cb8:	8d b5       	in	r24, 0x2d	; 45
 
    // Return received data
    return(SPDR);
 cba:	8e b5       	in	r24, 0x2e	; 46
}
 cbc:	08 95       	ret

00000cbe <ow_input_pin_state>:

#endif

uint8_t ow_input_pin_state()
{
	return OW_GET_IN();
 cbe:	89 b1       	in	r24, 0x09	; 9
}
 cc0:	84 70       	andi	r24, 0x04	; 4
 cc2:	08 95       	ret

00000cc4 <ow_parasite_enable>:

void ow_parasite_enable(void)
{
	OW_OUT_HIGH();
 cc4:	5a 9a       	sbi	0x0b, 2	; 11
	OW_DIR_OUT();
 cc6:	52 9a       	sbi	0x0a, 2	; 10
 cc8:	08 95       	ret

00000cca <_ZL16ow_bit_io_internhh>:
   cycles than the constant ones so the delays had to be shortened 
   to achive a 15uS overall delay 
   Setting/clearing a bit in I/O Register needs 1 cyle in OW_ONE_BUS
   but around 14 cyles in configureable bus (us-Delay is 4 cyles per uS) */
static uint8_t ow_bit_io_intern( uint8_t b, uint8_t with_parasite_enable )
{
 cca:	cf 93       	push	r28
 ccc:	df 93       	push	r29
 cce:	c8 2f       	mov	r28, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 cd0:	df b7       	in	r29, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 cd2:	f8 94       	cli
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_LOW();
 cd4:	5a 98       	cbi	0x0b, 2	; 11
#endif
		OW_DIR_OUT();    // drive bus low
 cd6:	52 9a       	sbi	0x0a, 2	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 cd8:	8a e0       	ldi	r24, 0x0A	; 10
 cda:	8a 95       	dec	r24
 cdc:	f1 f7       	brne	.-4      	; 0xcda <_ZL16ow_bit_io_internhh+0x10>
 cde:	00 c0       	rjmp	.+0      	; 0xce0 <_ZL16ow_bit_io_internhh+0x16>
		_delay_us(2);    // T_INT > 1usec accoding to timing-diagramm
		if ( b ) {
 ce0:	cc 23       	and	r28, r28
 ce2:	11 f0       	breq	.+4      	; 0xce8 <_ZL16ow_bit_io_internhh+0x1e>
			OW_DIR_IN(); // to write "1" release bus, resistor pulls high
 ce4:	52 98       	cbi	0x0a, 2	; 10
#if OW_USE_INTERNAL_PULLUP
			OW_OUT_HIGH();
 ce6:	5a 9a       	sbi	0x0b, 2	; 11
 ce8:	85 e4       	ldi	r24, 0x45	; 69
 cea:	8a 95       	dec	r24
 cec:	f1 f7       	brne	.-4      	; 0xcea <_ZL16ow_bit_io_internhh+0x20>
 cee:	00 00       	nop
		// edge that initiated the read time slot. Therefore, the master must 
		// release the bus and then sample the bus state within 15ussec from 
		// the start of the slot."
		_delay_us(15-2-OW_CONF_DELAYOFFSET);
		
		if( OW_GET_IN() == 0 ) {
 cf0:	4a 9b       	sbis	0x09, 2	; 9
			b = 0;  // sample at end of read-timeslot
 cf2:	c0 e0       	ldi	r28, 0x00	; 0
 cf4:	85 ee       	ldi	r24, 0xE5	; 229
 cf6:	8a 95       	dec	r24
 cf8:	f1 f7       	brne	.-4      	; 0xcf6 <_ZL16ow_bit_io_internhh+0x2c>
 cfa:	00 00       	nop
		}
	
		_delay_us(60-15-2+OW_CONF_DELAYOFFSET);
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
 cfc:	5a 9a       	sbi	0x0b, 2	; 11
#endif
		OW_DIR_IN();
 cfe:	52 98       	cbi	0x0a, 2	; 10
	
		if ( with_parasite_enable ) {
 d00:	61 11       	cpse	r22, r1
			ow_parasite_enable();
 d02:	0e 94 62 06 	call	0xcc4	; 0xcc4 <ow_parasite_enable>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 d06:	df bf       	out	0x3f, r29	; 63
 d08:	85 e3       	ldi	r24, 0x35	; 53
 d0a:	8a 95       	dec	r24
 d0c:	f1 f7       	brne	.-4      	; 0xd0a <_ZL16ow_bit_io_internhh+0x40>
 d0e:	00 00       	nop
	} /* ATOMIC_BLOCK */

	_delay_us(OW_RECOVERY_TIME); // may be increased for longer wires

	return b;
}
 d10:	8c 2f       	mov	r24, r28
 d12:	df 91       	pop	r29
 d14:	cf 91       	pop	r28
 d16:	08 95       	ret

00000d18 <ow_reset>:

uint8_t ow_reset(void)
{
	uint8_t err;
	
	OW_OUT_LOW();
 d18:	5a 98       	cbi	0x0b, 2	; 11
	OW_DIR_OUT();            // pull OW-Pin low for 480us
 d1a:	52 9a       	sbi	0x0a, 2	; 10
 d1c:	8f e7       	ldi	r24, 0x7F	; 127
 d1e:	97 e0       	ldi	r25, 0x07	; 7
 d20:	01 97       	sbiw	r24, 0x01	; 1
 d22:	f1 f7       	brne	.-4      	; 0xd20 <ow_reset+0x8>
 d24:	00 c0       	rjmp	.+0      	; 0xd26 <ow_reset+0xe>
 d26:	00 00       	nop
	_delay_us(480);

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 d28:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 d2a:	f8 94       	cli
		// set Pin as input - wait for clients to pull low
		OW_DIR_IN(); // input
 d2c:	52 98       	cbi	0x0a, 2	; 10
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
 d2e:	5a 9a       	sbi	0x0b, 2	; 11
 d30:	ef ef       	ldi	r30, 0xFF	; 255
 d32:	f0 e0       	ldi	r31, 0x00	; 0
 d34:	31 97       	sbiw	r30, 0x01	; 1
 d36:	f1 f7       	brne	.-4      	; 0xd34 <ow_reset+0x1c>
 d38:	00 c0       	rjmp	.+0      	; 0xd3a <ow_reset+0x22>
 d3a:	00 00       	nop
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
 d3c:	89 b1       	in	r24, 0x09	; 9
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 d3e:	9f bf       	out	0x3f, r25	; 63
 d40:	ef e7       	ldi	r30, 0x7F	; 127
 d42:	f6 e0       	ldi	r31, 0x06	; 6
 d44:	31 97       	sbiw	r30, 0x01	; 1
 d46:	f1 f7       	brne	.-4      	; 0xd44 <ow_reset+0x2c>
 d48:	00 c0       	rjmp	.+0      	; 0xd4a <ow_reset+0x32>
 d4a:	00 00       	nop
	}
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
 d4c:	4a 9b       	sbis	0x09, 2	; 9
 d4e:	02 c0       	rjmp	.+4      	; 0xd54 <ow_reset+0x3c>
#if OW_USE_INTERNAL_PULLUP
		OW_OUT_HIGH();
#endif
	
		_delay_us(64);       // was 66
		err = OW_GET_IN();   // no presence detect
 d50:	84 70       	andi	r24, 0x04	; 4
 d52:	08 95       	ret
	
	// after a delay the clients should release the line
	// and input-pin gets back to high by pull-up-resistor
	_delay_us(480 - 64);       // was 480-66
	if( OW_GET_IN() == 0 ) {
		err = 1;             // short circuit, expected low but got high
 d54:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return err;
}
 d56:	08 95       	ret

00000d58 <ow_bit_io>:
	return b;
}

uint8_t ow_bit_io( uint8_t b )
{
	return ow_bit_io_intern( b & 1, 0 );
 d58:	60 e0       	ldi	r22, 0x00	; 0
 d5a:	81 70       	andi	r24, 0x01	; 1
 d5c:	0e 94 65 06 	call	0xcca	; 0xcca <_ZL16ow_bit_io_internhh>
}
 d60:	08 95       	ret

00000d62 <ow_byte_wr>:

uint8_t ow_byte_wr( uint8_t b )
{
 d62:	cf 93       	push	r28
 d64:	df 93       	push	r29
 d66:	c8 2f       	mov	r28, r24
 d68:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i = 8, j;
	
	do {
		j = ow_bit_io( b & 1 );
 d6a:	8c 2f       	mov	r24, r28
 d6c:	81 70       	andi	r24, 0x01	; 1
 d6e:	0e 94 ac 06 	call	0xd58	; 0xd58 <ow_bit_io>
		b >>= 1;
 d72:	2c 2f       	mov	r18, r28
 d74:	30 e0       	ldi	r19, 0x00	; 0
 d76:	35 95       	asr	r19
 d78:	27 95       	ror	r18
 d7a:	c2 2f       	mov	r28, r18
		if( j ) {
 d7c:	81 11       	cpse	r24, r1
			b |= 0x80;
 d7e:	c0 68       	ori	r28, 0x80	; 128
 d80:	d1 50       	subi	r29, 0x01	; 1

uint8_t ow_byte_wr( uint8_t b )
{
	uint8_t i = 8, j;
	
	do {
 d82:	99 f7       	brne	.-26     	; 0xd6a <ow_byte_wr+0x8>
			b |= 0x80;
		}
	} while( --i );
	
	return b;
}
 d84:	8c 2f       	mov	r24, r28
 d86:	df 91       	pop	r29
 d88:	cf 91       	pop	r28
 d8a:	08 95       	ret

00000d8c <_Z31ow_byte_wr_with_parasite_enableh>:

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
 d8c:	cf 93       	push	r28
 d8e:	df 93       	push	r29
 d90:	d8 2f       	mov	r29, r24
	uint8_t i = 8, j;
 d92:	c8 e0       	ldi	r28, 0x08	; 8
	
	do {
		if ( i != 1 ) {
 d94:	c1 30       	cpi	r28, 0x01	; 1
 d96:	31 f0       	breq	.+12     	; 0xda4 <_Z31ow_byte_wr_with_parasite_enableh+0x18>
			j = ow_bit_io_intern( b & 1, 0 );
 d98:	60 e0       	ldi	r22, 0x00	; 0
 d9a:	8d 2f       	mov	r24, r29
 d9c:	81 70       	andi	r24, 0x01	; 1
 d9e:	0e 94 65 06 	call	0xcca	; 0xcca <_ZL16ow_bit_io_internhh>
 da2:	05 c0       	rjmp	.+10     	; 0xdae <_Z31ow_byte_wr_with_parasite_enableh+0x22>
		} else {
			j = ow_bit_io_intern( b & 1, 1 );
 da4:	61 e0       	ldi	r22, 0x01	; 1
 da6:	8d 2f       	mov	r24, r29
 da8:	81 70       	andi	r24, 0x01	; 1
 daa:	0e 94 65 06 	call	0xcca	; 0xcca <_ZL16ow_bit_io_internhh>
		}
		b >>= 1;
 dae:	2d 2f       	mov	r18, r29
 db0:	30 e0       	ldi	r19, 0x00	; 0
 db2:	35 95       	asr	r19
 db4:	27 95       	ror	r18
 db6:	d2 2f       	mov	r29, r18
		if( j ) {
 db8:	81 11       	cpse	r24, r1
			b |= 0x80;
 dba:	d0 68       	ori	r29, 0x80	; 128

uint8_t ow_byte_wr_with_parasite_enable( uint8_t b )
{
	uint8_t i = 8, j;
	
	do {
 dbc:	c1 50       	subi	r28, 0x01	; 1
 dbe:	51 f7       	brne	.-44     	; 0xd94 <_Z31ow_byte_wr_with_parasite_enableh+0x8>
			b |= 0x80;
		}
	} while( --i );
	
	return b;
}
 dc0:	8d 2f       	mov	r24, r29
 dc2:	df 91       	pop	r29
 dc4:	cf 91       	pop	r28
 dc6:	08 95       	ret

00000dc8 <_ZL17ow_command_internhPhh>:
	return next_diff;                   // to continue search
}


static void ow_command_intern( uint8_t command, uint8_t *id, uint8_t with_parasite_enable )
{
 dc8:	ef 92       	push	r14
 dca:	ff 92       	push	r15
 dcc:	0f 93       	push	r16
 dce:	1f 93       	push	r17
 dd0:	cf 93       	push	r28
 dd2:	df 93       	push	r29
 dd4:	e8 2e       	mov	r14, r24
 dd6:	eb 01       	movw	r28, r22
 dd8:	f4 2e       	mov	r15, r20
	uint8_t i;

	ow_reset();
 dda:	0e 94 8c 06 	call	0xd18	; 0xd18 <ow_reset>

	if( id ) {
 dde:	20 97       	sbiw	r28, 0x00	; 0
 de0:	69 f0       	breq	.+26     	; 0xdfc <_ZL17ow_command_internhPhh+0x34>
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
 de2:	85 e5       	ldi	r24, 0x55	; 85
 de4:	0e 94 b1 06 	call	0xd62	; 0xd62 <ow_byte_wr>
 de8:	8e 01       	movw	r16, r28
 dea:	08 5f       	subi	r16, 0xF8	; 248
 dec:	1f 4f       	sbci	r17, 0xFF	; 255
		i = OW_ROMCODE_SIZE;
		do {
			ow_byte_wr( *id );
 dee:	89 91       	ld	r24, Y+
 df0:	0e 94 b1 06 	call	0xd62	; 0xd62 <ow_byte_wr>
	ow_reset();

	if( id ) {
		ow_byte_wr( OW_MATCH_ROM );     // to a single device
		i = OW_ROMCODE_SIZE;
		do {
 df4:	c0 17       	cp	r28, r16
 df6:	d1 07       	cpc	r29, r17
 df8:	d1 f7       	brne	.-12     	; 0xdee <_ZL17ow_command_internhPhh+0x26>
 dfa:	03 c0       	rjmp	.+6      	; 0xe02 <_ZL17ow_command_internhPhh+0x3a>
			ow_byte_wr( *id );
			id++;
		} while( --i );
	} 
	else {
		ow_byte_wr( OW_SKIP_ROM );      // to all devices
 dfc:	8c ec       	ldi	r24, 0xCC	; 204
 dfe:	0e 94 b1 06 	call	0xd62	; 0xd62 <ow_byte_wr>
	}
	
	if ( with_parasite_enable  ) {
 e02:	ff 20       	and	r15, r15
 e04:	21 f0       	breq	.+8      	; 0xe0e <_ZL17ow_command_internhPhh+0x46>
		ow_byte_wr_with_parasite_enable( command );
 e06:	8e 2d       	mov	r24, r14
 e08:	0e 94 c6 06 	call	0xd8c	; 0xd8c <_Z31ow_byte_wr_with_parasite_enableh>
 e0c:	03 c0       	rjmp	.+6      	; 0xe14 <_ZL17ow_command_internhPhh+0x4c>
	} else {
		ow_byte_wr( command );
 e0e:	8e 2d       	mov	r24, r14
 e10:	0e 94 b1 06 	call	0xd62	; 0xd62 <ow_byte_wr>
	}
}
 e14:	df 91       	pop	r29
 e16:	cf 91       	pop	r28
 e18:	1f 91       	pop	r17
 e1a:	0f 91       	pop	r16
 e1c:	ff 90       	pop	r15
 e1e:	ef 90       	pop	r14
 e20:	08 95       	ret

00000e22 <ow_byte_rd>:

uint8_t ow_byte_rd( void )
{
	// read by sending only "1"s, so bus gets released
	// after the init low-pulse in every slot
	return ow_byte_wr( 0xFF ); 
 e22:	8f ef       	ldi	r24, 0xFF	; 255
 e24:	0e 94 b1 06 	call	0xd62	; 0xd62 <ow_byte_wr>
}
 e28:	08 95       	ret

00000e2a <ow_command>:
	}
}

void ow_command( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 0);
 e2a:	40 e0       	ldi	r20, 0x00	; 0
 e2c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZL17ow_command_internhPhh>
 e30:	08 95       	ret

00000e32 <ow_command_with_parasite_enable>:
}

void ow_command_with_parasite_enable( uint8_t command, uint8_t *id )
{
	ow_command_intern( command, id, 1 );
 e32:	41 e0       	ldi	r20, 0x01	; 1
 e34:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <_ZL17ow_command_internhPhh>
 e38:	08 95       	ret

00000e3a <DS18X20_start_meas>:
}

/* start measurement (CONVERT_T) for all sensors if input id==NULL 
   or for single sensor where id is the rom-code */
uint8_t DS18X20_start_meas( uint8_t with_power_extern, uint8_t id[])
{
 e3a:	1f 93       	push	r17
 e3c:	cf 93       	push	r28
 e3e:	df 93       	push	r29
 e40:	18 2f       	mov	r17, r24
 e42:	eb 01       	movw	r28, r22
	uint8_t ret;

	ow_reset();
 e44:	0e 94 8c 06 	call	0xd18	; 0xd18 <ow_reset>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
 e48:	0e 94 5f 06 	call	0xcbe	; 0xcbe <ow_input_pin_state>
 e4c:	88 23       	and	r24, r24
 e4e:	71 f0       	breq	.+28     	; 0xe6c <DS18X20_start_meas+0x32>
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
 e50:	11 30       	cpi	r17, 0x01	; 1
 e52:	31 f0       	breq	.+12     	; 0xe60 <DS18X20_start_meas+0x26>
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
 e54:	be 01       	movw	r22, r28
 e56:	84 e4       	ldi	r24, 0x44	; 68
 e58:	0e 94 19 07 	call	0xe32	; 0xe32 <ow_command_with_parasite_enable>
			/* not longer needed: ow_parasite_enable(); */
		} else {
			ow_command( DS18X20_CONVERT_T, id );
		}
		ret = DS18X20_OK;
 e5c:	80 e0       	ldi	r24, 0x00	; 0
 e5e:	07 c0       	rjmp	.+14     	; 0xe6e <DS18X20_start_meas+0x34>
	if( ow_input_pin_state() ) { // only send if bus is "idle" = high
		if ( with_power_extern != DS18X20_POWER_EXTERN ) {
			ow_command_with_parasite_enable( DS18X20_CONVERT_T, id );
			/* not longer needed: ow_parasite_enable(); */
		} else {
			ow_command( DS18X20_CONVERT_T, id );
 e60:	be 01       	movw	r22, r28
 e62:	84 e4       	ldi	r24, 0x44	; 68
 e64:	0e 94 15 07 	call	0xe2a	; 0xe2a <ow_command>
		}
		ret = DS18X20_OK;
 e68:	80 e0       	ldi	r24, 0x00	; 0
 e6a:	01 c0       	rjmp	.+2      	; 0xe6e <DS18X20_start_meas+0x34>
	} 
	else { 
		//uart_puts_P_verbose( "DS18X20_start_meas: Short Circuit!\r" );
		ret = DS18X20_START_FAIL;
 e6c:	82 e0       	ldi	r24, 0x02	; 2
	}

	return ret;
}
 e6e:	df 91       	pop	r29
 e70:	cf 91       	pop	r28
 e72:	1f 91       	pop	r17
 e74:	08 95       	ret

00000e76 <DS18X20_conversion_in_progress>:

// returns 1 if conversion is in progress, 0 if finished
// not available when parasite powered.
uint8_t DS18X20_conversion_in_progress(void)
{
	return ow_bit_io( 1 ) ? DS18X20_CONVERSION_DONE : DS18X20_CONVERTING;
 e76:	81 e0       	ldi	r24, 0x01	; 1
 e78:	0e 94 ac 06 	call	0xd58	; 0xd58 <ow_bit_io>
 e7c:	91 e0       	ldi	r25, 0x01	; 1
 e7e:	81 11       	cpse	r24, r1
 e80:	90 e0       	ldi	r25, 0x00	; 0
}
 e82:	89 2f       	mov	r24, r25
 e84:	08 95       	ret

00000e86 <__tablejump2__>:
 e86:	ee 0f       	add	r30, r30
 e88:	ff 1f       	adc	r31, r31

00000e8a <__tablejump__>:
 e8a:	05 90       	lpm	r0, Z+
 e8c:	f4 91       	lpm	r31, Z
 e8e:	e0 2d       	mov	r30, r0
 e90:	09 94       	ijmp

00000e92 <__eerd_byte_m328p>:
 e92:	f9 99       	sbic	0x1f, 1	; 31
 e94:	fe cf       	rjmp	.-4      	; 0xe92 <__eerd_byte_m328p>
 e96:	92 bd       	out	0x22, r25	; 34
 e98:	81 bd       	out	0x21, r24	; 33
 e9a:	f8 9a       	sbi	0x1f, 0	; 31
 e9c:	99 27       	eor	r25, r25
 e9e:	80 b5       	in	r24, 0x20	; 32
 ea0:	08 95       	ret

00000ea2 <__eewr_byte_m328p>:
 ea2:	26 2f       	mov	r18, r22

00000ea4 <__eewr_r18_m328p>:
 ea4:	f9 99       	sbic	0x1f, 1	; 31
 ea6:	fe cf       	rjmp	.-4      	; 0xea4 <__eewr_r18_m328p>
 ea8:	1f ba       	out	0x1f, r1	; 31
 eaa:	92 bd       	out	0x22, r25	; 34
 eac:	81 bd       	out	0x21, r24	; 33
 eae:	20 bd       	out	0x20, r18	; 32
 eb0:	0f b6       	in	r0, 0x3f	; 63
 eb2:	f8 94       	cli
 eb4:	fa 9a       	sbi	0x1f, 2	; 31
 eb6:	f9 9a       	sbi	0x1f, 1	; 31
 eb8:	0f be       	out	0x3f, r0	; 63
 eba:	01 96       	adiw	r24, 0x01	; 1
 ebc:	08 95       	ret

00000ebe <_exit>:
 ebe:	f8 94       	cli

00000ec0 <__stop_program>:
 ec0:	ff cf       	rjmp	.-2      	; 0xec0 <__stop_program>
